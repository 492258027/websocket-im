// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: im.proto

package im

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MsgTypeEnum int32

const (
	MsgTypeEnum_UNDEFINED        MsgTypeEnum = 0
	MsgTypeEnum_LOGIN            MsgTypeEnum = 1  //登录
	MsgTypeEnum_LOGOUT           MsgTypeEnum = 2  //退出登录,没有消息体
	MsgTypeEnum_ACK              MsgTypeEnum = 3  //ack
	MsgTypeEnum_PRICHAT          MsgTypeEnum = 4  //私聊聊天消息，包括消息已读 消息撤回
	MsgTypeEnum_GROUPCHAT        MsgTypeEnum = 5  //群聊聊天消息，包括消息已读 消息撤回
	MsgTypeEnum_HEARTBEAT        MsgTypeEnum = 6  //心跳包,没有消息体
	MsgTypeEnum_GROUPCHANGE      MsgTypeEnum = 7  //群关系维护消息
	MsgTypeEnum_NEWMSG           MsgTypeEnum = 8  //willingox向MQ发送的新消息通知,没有消息体
	MsgTypeEnum_KICKOUT          MsgTypeEnum = 9  //踢人消息
	MsgTypeEnum_PRIINSTANT       MsgTypeEnum = 10 //私聊即时消息，不需要存chatmq，消息体还是聊天消息（比如推送即时消息，客户端正在写入等
	MsgTypeEnum_GROUPINSTANT     MsgTypeEnum = 11 //群聊即时消息，不需要存chatmq，消息体还是聊天消息（比如推送即时消息，客户端正在写入等
	MsgTypeEnum_ENTERFOREGROUND  MsgTypeEnum = 12 //client切到前台,没有消息体
	MsgTypeEnum_ENTERBACKGROUND  MsgTypeEnum = 13 //client切入后台
	MsgTypeEnum_SERVERCMD        MsgTypeEnum = 14 //服务端测试消息
	MsgTypeEnum_CONFMSG          MsgTypeEnum = 15 //视频会议消息（会议结束）
	MsgTypeEnum_VIDEOCALL        MsgTypeEnum = 16 //videocall消息
	MsgTypeEnum_VIDEOCALLINSTANT MsgTypeEnum = 17 //videocall即时消息  离线需要推送
	MsgTypeEnum_CONFMSGINSTANT   MsgTypeEnum = 18 //视频会议消息即时消息（邀请入会）
	MsgTypeEnum_NOTICEPUSH       MsgTypeEnum = 19 //通知推送消息，推送给在线游客和在线用户
)

// Enum value maps for MsgTypeEnum.
var (
	MsgTypeEnum_name = map[int32]string{
		0:  "UNDEFINED",
		1:  "LOGIN",
		2:  "LOGOUT",
		3:  "ACK",
		4:  "PRICHAT",
		5:  "GROUPCHAT",
		6:  "HEARTBEAT",
		7:  "GROUPCHANGE",
		8:  "NEWMSG",
		9:  "KICKOUT",
		10: "PRIINSTANT",
		11: "GROUPINSTANT",
		12: "ENTERFOREGROUND",
		13: "ENTERBACKGROUND",
		14: "SERVERCMD",
		15: "CONFMSG",
		16: "VIDEOCALL",
		17: "VIDEOCALLINSTANT",
		18: "CONFMSGINSTANT",
		19: "NOTICEPUSH",
	}
	MsgTypeEnum_value = map[string]int32{
		"UNDEFINED":        0,
		"LOGIN":            1,
		"LOGOUT":           2,
		"ACK":              3,
		"PRICHAT":          4,
		"GROUPCHAT":        5,
		"HEARTBEAT":        6,
		"GROUPCHANGE":      7,
		"NEWMSG":           8,
		"KICKOUT":          9,
		"PRIINSTANT":       10,
		"GROUPINSTANT":     11,
		"ENTERFOREGROUND":  12,
		"ENTERBACKGROUND":  13,
		"SERVERCMD":        14,
		"CONFMSG":          15,
		"VIDEOCALL":        16,
		"VIDEOCALLINSTANT": 17,
		"CONFMSGINSTANT":   18,
		"NOTICEPUSH":       19,
	}
)

func (x MsgTypeEnum) Enum() *MsgTypeEnum {
	p := new(MsgTypeEnum)
	*p = x
	return p
}

func (x MsgTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[0].Descriptor()
}

func (MsgTypeEnum) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[0]
}

func (x MsgTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgTypeEnum.Descriptor instead.
func (MsgTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{0}
}

type ContentTypeEnum int32

const (
	ContentTypeEnum_UNDEFINED1   ContentTypeEnum = 0
	ContentTypeEnum_TXT          ContentTypeEnum = 1  //文本消息
	ContentTypeEnum_IMG          ContentTypeEnum = 2  //图片消息
	ContentTypeEnum_VOICE        ContentTypeEnum = 3  //语音消息
	ContentTypeEnum_VIDEO        ContentTypeEnum = 4  //视频消息
	ContentTypeEnum_LOCATION     ContentTypeEnum = 5  //位置消息
	ContentTypeEnum_FILE         ContentTypeEnum = 6  //文件消息
	ContentTypeEnum_CUSTOM       ContentTypeEnum = 7  //自定义消息
	ContentTypeEnum_RECALL       ContentTypeEnum = 8  //撤回消息
	ContentTypeEnum_READED       ContentTypeEnum = 9  //消息已读
	ContentTypeEnum_CMDCONT      ContentTypeEnum = 10 //命令消息
	ContentTypeEnum_ATCONT       ContentTypeEnum = 11 //@消息
	ContentTypeEnum_BUZCONT      ContentTypeEnum = 12 //业务消息
	ContentTypeEnum_REDPKT       ContentTypeEnum = 13 //发红包消息
	ContentTypeEnum_REDPKTNOTICE ContentTypeEnum = 14 //收红包通知消息 没有消息体
	ContentTypeEnum_TXTWITHTITLE ContentTypeEnum = 15 //文本消息，带有title
)

// Enum value maps for ContentTypeEnum.
var (
	ContentTypeEnum_name = map[int32]string{
		0:  "UNDEFINED1",
		1:  "TXT",
		2:  "IMG",
		3:  "VOICE",
		4:  "VIDEO",
		5:  "LOCATION",
		6:  "FILE",
		7:  "CUSTOM",
		8:  "RECALL",
		9:  "READED",
		10: "CMDCONT",
		11: "ATCONT",
		12: "BUZCONT",
		13: "REDPKT",
		14: "REDPKTNOTICE",
		15: "TXTWITHTITLE",
	}
	ContentTypeEnum_value = map[string]int32{
		"UNDEFINED1":   0,
		"TXT":          1,
		"IMG":          2,
		"VOICE":        3,
		"VIDEO":        4,
		"LOCATION":     5,
		"FILE":         6,
		"CUSTOM":       7,
		"RECALL":       8,
		"READED":       9,
		"CMDCONT":      10,
		"ATCONT":       11,
		"BUZCONT":      12,
		"REDPKT":       13,
		"REDPKTNOTICE": 14,
		"TXTWITHTITLE": 15,
	}
)

func (x ContentTypeEnum) Enum() *ContentTypeEnum {
	p := new(ContentTypeEnum)
	*p = x
	return p
}

func (x ContentTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[1].Descriptor()
}

func (ContentTypeEnum) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[1]
}

func (x ContentTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentTypeEnum.Descriptor instead.
func (ContentTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{1}
}

type GroupMsgTypeEnum int32

const (
	GroupMsgTypeEnum_UNDEFINED2      GroupMsgTypeEnum = 0
	GroupMsgTypeEnum_ADD_MEM         GroupMsgTypeEnum = 1  //邀请入群
	GroupMsgTypeEnum_DEL_MEM         GroupMsgTypeEnum = 2  //删除群员
	GroupMsgTypeEnum_MEM_QUIT        GroupMsgTypeEnum = 3  //群员退出
	GroupMsgTypeEnum_DISMISS         GroupMsgTypeEnum = 4  //解散群
	GroupMsgTypeEnum_CHANGE_OWNER    GroupMsgTypeEnum = 5  //换群主
	GroupMsgTypeEnum_CHANGE_NAME     GroupMsgTypeEnum = 6  //更改群名称
	GroupMsgTypeEnum_CHANGE_DES      GroupMsgTypeEnum = 7  //更改群描述
	GroupMsgTypeEnum_CHANGE_MAXUSERS GroupMsgTypeEnum = 8  //更改群成员上限
	GroupMsgTypeEnum_CHANGE_ANNOUNCE GroupMsgTypeEnum = 9  //更改群公告
	GroupMsgTypeEnum_CHANGE_AVATAR   GroupMsgTypeEnum = 10 //更改群头像
	GroupMsgTypeEnum_CHANGE_TOP      GroupMsgTypeEnum = 11 //更改群配置
	GroupMsgTypeEnum_CHANGE_Disturb  GroupMsgTypeEnum = 12 //更改群配置
)

// Enum value maps for GroupMsgTypeEnum.
var (
	GroupMsgTypeEnum_name = map[int32]string{
		0:  "UNDEFINED2",
		1:  "ADD_MEM",
		2:  "DEL_MEM",
		3:  "MEM_QUIT",
		4:  "DISMISS",
		5:  "CHANGE_OWNER",
		6:  "CHANGE_NAME",
		7:  "CHANGE_DES",
		8:  "CHANGE_MAXUSERS",
		9:  "CHANGE_ANNOUNCE",
		10: "CHANGE_AVATAR",
		11: "CHANGE_TOP",
		12: "CHANGE_Disturb",
	}
	GroupMsgTypeEnum_value = map[string]int32{
		"UNDEFINED2":      0,
		"ADD_MEM":         1,
		"DEL_MEM":         2,
		"MEM_QUIT":        3,
		"DISMISS":         4,
		"CHANGE_OWNER":    5,
		"CHANGE_NAME":     6,
		"CHANGE_DES":      7,
		"CHANGE_MAXUSERS": 8,
		"CHANGE_ANNOUNCE": 9,
		"CHANGE_AVATAR":   10,
		"CHANGE_TOP":      11,
		"CHANGE_Disturb":  12,
	}
)

func (x GroupMsgTypeEnum) Enum() *GroupMsgTypeEnum {
	p := new(GroupMsgTypeEnum)
	*p = x
	return p
}

func (x GroupMsgTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupMsgTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[2].Descriptor()
}

func (GroupMsgTypeEnum) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[2]
}

func (x GroupMsgTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupMsgTypeEnum.Descriptor instead.
func (GroupMsgTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{2}
}

type AckCodeEnum int32

const (
	AckCodeEnum_UNDEFINED3        AckCodeEnum = 0
	AckCodeEnum_OK                AckCodeEnum = 1 //成功
	AckCodeEnum_NAMENOTFOUND      AckCodeEnum = 2 //账号未找到
	AckCodeEnum_PASSWORDERR       AckCodeEnum = 3 //密码错误
	AckCodeEnum_FORBIDDEN         AckCodeEnum = 4 //权限错误(例如自动登录失败)
	AckCodeEnum_UNAUTHORIZED      AckCodeEnum = 5 //未登录
	AckCodeEnum_INTERNALSERVERERR AckCodeEnum = 6 //服务器内部错误
	AckCodeEnum_BAD_REQUEST       AckCodeEnum = 7 //客户端请求语法错误或字段参数值错误
	AckCodeEnum_MSGFIELD_LACK     AckCodeEnum = 8 //消息字段缺失
)

// Enum value maps for AckCodeEnum.
var (
	AckCodeEnum_name = map[int32]string{
		0: "UNDEFINED3",
		1: "OK",
		2: "NAMENOTFOUND",
		3: "PASSWORDERR",
		4: "FORBIDDEN",
		5: "UNAUTHORIZED",
		6: "INTERNALSERVERERR",
		7: "BAD_REQUEST",
		8: "MSGFIELD_LACK",
	}
	AckCodeEnum_value = map[string]int32{
		"UNDEFINED3":        0,
		"OK":                1,
		"NAMENOTFOUND":      2,
		"PASSWORDERR":       3,
		"FORBIDDEN":         4,
		"UNAUTHORIZED":      5,
		"INTERNALSERVERERR": 6,
		"BAD_REQUEST":       7,
		"MSGFIELD_LACK":     8,
	}
)

func (x AckCodeEnum) Enum() *AckCodeEnum {
	p := new(AckCodeEnum)
	*p = x
	return p
}

func (x AckCodeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AckCodeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[3].Descriptor()
}

func (AckCodeEnum) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[3]
}

func (x AckCodeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AckCodeEnum.Descriptor instead.
func (AckCodeEnum) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{3}
}

type KickTypeEnum int32

const (
	KickTypeEnum_UNDEFINED4     KickTypeEnum = 0
	KickTypeEnum_SAMEITEMLOGIN  KickTypeEnum = 1 //同端踢人
	KickTypeEnum_SRVKICKOUT     KickTypeEnum = 2 //服务端强制下线
	KickTypeEnum_SRVDELUSER     KickTypeEnum = 3 //服务端删除用户
	KickTypeEnum_SRVDISABLEUSER KickTypeEnum = 4 //服务端禁用用户
	KickTypeEnum_CHANGEPWD      KickTypeEnum = 5 //修改密码
)

// Enum value maps for KickTypeEnum.
var (
	KickTypeEnum_name = map[int32]string{
		0: "UNDEFINED4",
		1: "SAMEITEMLOGIN",
		2: "SRVKICKOUT",
		3: "SRVDELUSER",
		4: "SRVDISABLEUSER",
		5: "CHANGEPWD",
	}
	KickTypeEnum_value = map[string]int32{
		"UNDEFINED4":     0,
		"SAMEITEMLOGIN":  1,
		"SRVKICKOUT":     2,
		"SRVDELUSER":     3,
		"SRVDISABLEUSER": 4,
		"CHANGEPWD":      5,
	}
)

func (x KickTypeEnum) Enum() *KickTypeEnum {
	p := new(KickTypeEnum)
	*p = x
	return p
}

func (x KickTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KickTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[4].Descriptor()
}

func (KickTypeEnum) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[4]
}

func (x KickTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KickTypeEnum.Descriptor instead.
func (KickTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{4}
}

type DeviceTypeEnum int32

const (
	DeviceTypeEnum_UNDEFINED13 DeviceTypeEnum = 0
	DeviceTypeEnum_ANDROID     DeviceTypeEnum = 1 //安卓移动设备
	DeviceTypeEnum_IOS         DeviceTypeEnum = 2 //ios移动设备
	DeviceTypeEnum_WIN         DeviceTypeEnum = 3 //windows PC
	DeviceTypeEnum_MAC         DeviceTypeEnum = 4 //MAC PC
	DeviceTypeEnum_ALL         DeviceTypeEnum = 5 //pc和手机端
	DeviceTypeEnum_PC          DeviceTypeEnum = 6 //pc
	DeviceTypeEnum_PHONE       DeviceTypeEnum = 7 //移动设备
	DeviceTypeEnum_WEB         DeviceTypeEnum = 8 //网页端
)

// Enum value maps for DeviceTypeEnum.
var (
	DeviceTypeEnum_name = map[int32]string{
		0: "UNDEFINED13",
		1: "ANDROID",
		2: "IOS",
		3: "WIN",
		4: "MAC",
		5: "ALL",
		6: "PC",
		7: "PHONE",
		8: "WEB",
	}
	DeviceTypeEnum_value = map[string]int32{
		"UNDEFINED13": 0,
		"ANDROID":     1,
		"IOS":         2,
		"WIN":         3,
		"MAC":         4,
		"ALL":         5,
		"PC":          6,
		"PHONE":       7,
		"WEB":         8,
	}
)

func (x DeviceTypeEnum) Enum() *DeviceTypeEnum {
	p := new(DeviceTypeEnum)
	*p = x
	return p
}

func (x DeviceTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[5].Descriptor()
}

func (DeviceTypeEnum) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[5]
}

func (x DeviceTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceTypeEnum.Descriptor instead.
func (DeviceTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{5}
}

type PhoneTypeEnum int32

const (
	PhoneTypeEnum_UNDEFINED14 PhoneTypeEnum = 0
	PhoneTypeEnum_IPHONE      PhoneTypeEnum = 1 //苹果
	PhoneTypeEnum_HUAWEI      PhoneTypeEnum = 2 //华为
	PhoneTypeEnum_MEIZU       PhoneTypeEnum = 3 //魅族
	PhoneTypeEnum_XIAOMI      PhoneTypeEnum = 4 //小米
	PhoneTypeEnum_VIVO        PhoneTypeEnum = 5 //vivo
	PhoneTypeEnum_OPPO        PhoneTypeEnum = 6 //oppo
)

// Enum value maps for PhoneTypeEnum.
var (
	PhoneTypeEnum_name = map[int32]string{
		0: "UNDEFINED14",
		1: "IPHONE",
		2: "HUAWEI",
		3: "MEIZU",
		4: "XIAOMI",
		5: "VIVO",
		6: "OPPO",
	}
	PhoneTypeEnum_value = map[string]int32{
		"UNDEFINED14": 0,
		"IPHONE":      1,
		"HUAWEI":      2,
		"MEIZU":       3,
		"XIAOMI":      4,
		"VIVO":        5,
		"OPPO":        6,
	}
)

func (x PhoneTypeEnum) Enum() *PhoneTypeEnum {
	p := new(PhoneTypeEnum)
	*p = x
	return p
}

func (x PhoneTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhoneTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[6].Descriptor()
}

func (PhoneTypeEnum) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[6]
}

func (x PhoneTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhoneTypeEnum.Descriptor instead.
func (PhoneTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{6}
}

//用户状态
type UserStatEnum int32

const (
	UserStatEnum_UNDEFINED15 UserStatEnum = 0
	UserStatEnum_CONNECT     UserStatEnum = 1 //连接,未登录
	UserStatEnum_ONLINE      UserStatEnum = 2 //登陆成功,允许重复登录
	UserStatEnum_OFFLINE     UserStatEnum = 3 //离线
	UserStatEnum_ACTIVEQUIT  UserStatEnum = 4 //主动退出登录
	UserStatEnum_BACKSTAGE   UserStatEnum = 5 //ios专用,此状态时，新消息到达通知和IOS推送同时执行
)

// Enum value maps for UserStatEnum.
var (
	UserStatEnum_name = map[int32]string{
		0: "UNDEFINED15",
		1: "CONNECT",
		2: "ONLINE",
		3: "OFFLINE",
		4: "ACTIVEQUIT",
		5: "BACKSTAGE",
	}
	UserStatEnum_value = map[string]int32{
		"UNDEFINED15": 0,
		"CONNECT":     1,
		"ONLINE":      2,
		"OFFLINE":     3,
		"ACTIVEQUIT":  4,
		"BACKSTAGE":   5,
	}
)

func (x UserStatEnum) Enum() *UserStatEnum {
	p := new(UserStatEnum)
	*p = x
	return p
}

func (x UserStatEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserStatEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[7].Descriptor()
}

func (UserStatEnum) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[7]
}

func (x UserStatEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserStatEnum.Descriptor instead.
func (UserStatEnum) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{7}
}

//离线推送开关
type PushSwitchEnum int32

const (
	PushSwitchEnum_UNDEFINED16  PushSwitchEnum = 0
	PushSwitchEnum_ON           PushSwitchEnum = 1 //开启推送
	PushSwitchEnum_OFF          PushSwitchEnum = 2 //关闭推送
	PushSwitchEnum_OFF_AT_NIGHT PushSwitchEnum = 3 //夜间关闭推送  22:00 -- 7:00
)

// Enum value maps for PushSwitchEnum.
var (
	PushSwitchEnum_name = map[int32]string{
		0: "UNDEFINED16",
		1: "ON",
		2: "OFF",
		3: "OFF_AT_NIGHT",
	}
	PushSwitchEnum_value = map[string]int32{
		"UNDEFINED16":  0,
		"ON":           1,
		"OFF":          2,
		"OFF_AT_NIGHT": 3,
	}
)

func (x PushSwitchEnum) Enum() *PushSwitchEnum {
	p := new(PushSwitchEnum)
	*p = x
	return p
}

func (x PushSwitchEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PushSwitchEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[8].Descriptor()
}

func (PushSwitchEnum) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[8]
}

func (x PushSwitchEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PushSwitchEnum.Descriptor instead.
func (PushSwitchEnum) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{8}
}

//***********       视频会议消息体     ************//
//视频会议消息类型
type ConfTypeEnum int32

const (
	ConfTypeEnum_UNDEFINED5    ConfTypeEnum = 0
	ConfTypeEnum_INVITE        ConfTypeEnum = 1 //邀请入会
	ConfTypeEnum_ACCEPT        ConfTypeEnum = 2 //同意入会
	ConfTypeEnum_REFUSE        ConfTypeEnum = 3 //拒绝入会
	ConfTypeEnum_CREATERHANGUP ConfTypeEnum = 4 //创建者挂断会议
	ConfTypeEnum_CMD           ConfTypeEnum = 5 //cmd消息
)

// Enum value maps for ConfTypeEnum.
var (
	ConfTypeEnum_name = map[int32]string{
		0: "UNDEFINED5",
		1: "INVITE",
		2: "ACCEPT",
		3: "REFUSE",
		4: "CREATERHANGUP",
		5: "CMD",
	}
	ConfTypeEnum_value = map[string]int32{
		"UNDEFINED5":    0,
		"INVITE":        1,
		"ACCEPT":        2,
		"REFUSE":        3,
		"CREATERHANGUP": 4,
		"CMD":           5,
	}
)

func (x ConfTypeEnum) Enum() *ConfTypeEnum {
	p := new(ConfTypeEnum)
	*p = x
	return p
}

func (x ConfTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[9].Descriptor()
}

func (ConfTypeEnum) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[9]
}

func (x ConfTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfTypeEnum.Descriptor instead.
func (ConfTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{9}
}

//***********       Call消息体     ************//
//Call消息类型
type CallTypeEnum int32

const (
	CallTypeEnum_UNDEFINED6        CallTypeEnum = 0
	CallTypeEnum_INVITE1           CallTypeEnum = 1  //邀请
	CallTypeEnum_HANGUP1           CallTypeEnum = 2  //挂断 已连接成功  ws没有消息体
	CallTypeEnum_CANCEL1           CallTypeEnum = 3  //取消 未连接成功时创建者取消 ws没有消息体
	CallTypeEnum_ACCEPT1           CallTypeEnum = 4  //同意
	CallTypeEnum_REFUSE1           CallTypeEnum = 5  //拒绝 被邀请人拒绝 ws没有消息体
	CallTypeEnum_BUSY1             CallTypeEnum = 6  //忙线 被邀请人忙 ws没有消息体
	CallTypeEnum_ANSWERONOTHERDEV1 CallTypeEnum = 7  //已在其他设备接听 ws没有消息体
	CallTypeEnum_CREATE1           CallTypeEnum = 8  //创建并邀请
	CallTypeEnum_JOIN1             CallTypeEnum = 9  //被邀请者加入
	CallTypeEnum_REJOIN1           CallTypeEnum = 10 //重新加入(创建者或被邀请者)
	CallTypeEnum_DATA1             CallTypeEnum = 11 //传输数据
	CallTypeEnum_ANSWER1           CallTypeEnum = 12 //answer消息  点击同意时才发送
	CallTypeEnum_ACK1              CallTypeEnum = 13 //ack
	CallTypeEnum_CMD1              CallTypeEnum = 14 //cmd消息 ws没有消息体
	CallTypeEnum_HEARTBEAT1        CallTypeEnum = 15 //心跳包,ws没有消息体
)

// Enum value maps for CallTypeEnum.
var (
	CallTypeEnum_name = map[int32]string{
		0:  "UNDEFINED6",
		1:  "INVITE1",
		2:  "HANGUP1",
		3:  "CANCEL1",
		4:  "ACCEPT1",
		5:  "REFUSE1",
		6:  "BUSY1",
		7:  "ANSWERONOTHERDEV1",
		8:  "CREATE1",
		9:  "JOIN1",
		10: "REJOIN1",
		11: "DATA1",
		12: "ANSWER1",
		13: "ACK1",
		14: "CMD1",
		15: "HEARTBEAT1",
	}
	CallTypeEnum_value = map[string]int32{
		"UNDEFINED6":        0,
		"INVITE1":           1,
		"HANGUP1":           2,
		"CANCEL1":           3,
		"ACCEPT1":           4,
		"REFUSE1":           5,
		"BUSY1":             6,
		"ANSWERONOTHERDEV1": 7,
		"CREATE1":           8,
		"JOIN1":             9,
		"REJOIN1":           10,
		"DATA1":             11,
		"ANSWER1":           12,
		"ACK1":              13,
		"CMD1":              14,
		"HEARTBEAT1":        15,
	}
)

func (x CallTypeEnum) Enum() *CallTypeEnum {
	p := new(CallTypeEnum)
	*p = x
	return p
}

func (x CallTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[10].Descriptor()
}

func (CallTypeEnum) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[10]
}

func (x CallTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallTypeEnum.Descriptor instead.
func (CallTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{10}
}

type RoomTypeEnum int32

const (
	RoomTypeEnum_UNDEFINED7  RoomTypeEnum = 0
	RoomTypeEnum_ONEVSONE    RoomTypeEnum = 1 //1V1
	RoomTypeEnum_ONEVSN      RoomTypeEnum = 2 //1VN
	RoomTypeEnum_MULTIPERSON RoomTypeEnum = 3 //多人会议
)

// Enum value maps for RoomTypeEnum.
var (
	RoomTypeEnum_name = map[int32]string{
		0: "UNDEFINED7",
		1: "ONEVSONE",
		2: "ONEVSN",
		3: "MULTIPERSON",
	}
	RoomTypeEnum_value = map[string]int32{
		"UNDEFINED7":  0,
		"ONEVSONE":    1,
		"ONEVSN":      2,
		"MULTIPERSON": 3,
	}
)

func (x RoomTypeEnum) Enum() *RoomTypeEnum {
	p := new(RoomTypeEnum)
	*p = x
	return p
}

func (x RoomTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[11].Descriptor()
}

func (RoomTypeEnum) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[11]
}

func (x RoomTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomTypeEnum.Descriptor instead.
func (RoomTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{11}
}

//***********       红包消息定义red packet     ************//
type RedPktMsgTypeEnum int32

const (
	RedPktMsgTypeEnum_UNDEFINED8 RedPktMsgTypeEnum = 0
	RedPktMsgTypeEnum_SEND       RedPktMsgTypeEnum = 1 //发红包
	RedPktMsgTypeEnum_OPEN       RedPktMsgTypeEnum = 2 //开红包
)

// Enum value maps for RedPktMsgTypeEnum.
var (
	RedPktMsgTypeEnum_name = map[int32]string{
		0: "UNDEFINED8",
		1: "SEND",
		2: "OPEN",
	}
	RedPktMsgTypeEnum_value = map[string]int32{
		"UNDEFINED8": 0,
		"SEND":       1,
		"OPEN":       2,
	}
)

func (x RedPktMsgTypeEnum) Enum() *RedPktMsgTypeEnum {
	p := new(RedPktMsgTypeEnum)
	*p = x
	return p
}

func (x RedPktMsgTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedPktMsgTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[12].Descriptor()
}

func (RedPktMsgTypeEnum) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[12]
}

func (x RedPktMsgTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedPktMsgTypeEnum.Descriptor instead.
func (RedPktMsgTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{12}
}

type RedPktTypeEnum int32

const (
	RedPktTypeEnum_UNDEFINED9 RedPktTypeEnum = 0
	RedPktTypeEnum_ORDINARY   RedPktTypeEnum = 1 //普通
	RedPktTypeEnum_LUCKY      RedPktTypeEnum = 2 //拼手气
	RedPktTypeEnum_AVERAGE    RedPktTypeEnum = 3 //平均
)

// Enum value maps for RedPktTypeEnum.
var (
	RedPktTypeEnum_name = map[int32]string{
		0: "UNDEFINED9",
		1: "ORDINARY",
		2: "LUCKY",
		3: "AVERAGE",
	}
	RedPktTypeEnum_value = map[string]int32{
		"UNDEFINED9": 0,
		"ORDINARY":   1,
		"LUCKY":      2,
		"AVERAGE":    3,
	}
)

func (x RedPktTypeEnum) Enum() *RedPktTypeEnum {
	p := new(RedPktTypeEnum)
	*p = x
	return p
}

func (x RedPktTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedPktTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[13].Descriptor()
}

func (RedPktTypeEnum) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[13]
}

func (x RedPktTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedPktTypeEnum.Descriptor instead.
func (RedPktTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{13}
}

type RedPktStateEnum int32

const (
	RedPktStateEnum_UNDEFINED10 RedPktStateEnum = 0
	RedPktStateEnum_WAITPAY     RedPktStateEnum = 1 //待支付
	RedPktStateEnum_PaySuccess  RedPktStateEnum = 2 //支付完成
	RedPktStateEnum_EXPIRE      RedPktStateEnum = 3 //过期
	RedPktStateEnum_TAKEOVER    RedPktStateEnum = 4 //被领完
)

// Enum value maps for RedPktStateEnum.
var (
	RedPktStateEnum_name = map[int32]string{
		0: "UNDEFINED10",
		1: "WAITPAY",
		2: "PaySuccess",
		3: "EXPIRE",
		4: "TAKEOVER",
	}
	RedPktStateEnum_value = map[string]int32{
		"UNDEFINED10": 0,
		"WAITPAY":     1,
		"PaySuccess":  2,
		"EXPIRE":      3,
		"TAKEOVER":    4,
	}
)

func (x RedPktStateEnum) Enum() *RedPktStateEnum {
	p := new(RedPktStateEnum)
	*p = x
	return p
}

func (x RedPktStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedPktStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[14].Descriptor()
}

func (RedPktStateEnum) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[14]
}

func (x RedPktStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedPktStateEnum.Descriptor instead.
func (RedPktStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{14}
}

type RedPktToTypeEnum int32

const (
	RedPktToTypeEnum_UNDEFINED12   RedPktToTypeEnum = 0
	RedPktToTypeEnum_REDPKTPRIVATE RedPktToTypeEnum = 1 //私聊红包
	RedPktToTypeEnum_REDPKTGROUP   RedPktToTypeEnum = 2 //群聊红包
)

// Enum value maps for RedPktToTypeEnum.
var (
	RedPktToTypeEnum_name = map[int32]string{
		0: "UNDEFINED12",
		1: "REDPKTPRIVATE",
		2: "REDPKTGROUP",
	}
	RedPktToTypeEnum_value = map[string]int32{
		"UNDEFINED12":   0,
		"REDPKTPRIVATE": 1,
		"REDPKTGROUP":   2,
	}
)

func (x RedPktToTypeEnum) Enum() *RedPktToTypeEnum {
	p := new(RedPktToTypeEnum)
	*p = x
	return p
}

func (x RedPktToTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedPktToTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[15].Descriptor()
}

func (RedPktToTypeEnum) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[15]
}

func (x RedPktToTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedPktToTypeEnum.Descriptor instead.
func (RedPktToTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{15}
}

//***********       敏感词过滤     ************//
type SenWordRetTypeEnum int32

const (
	SenWordRetTypeEnum_UNDEFINED11   SenWordRetTypeEnum = 0
	SenWordRetTypeEnum_REPLACESUC    SenWordRetTypeEnum = 1 //替换成功   上报给客户端发送成功并需替换内容
	SenWordRetTypeEnum_NONEEDREPLACE SenWordRetTypeEnum = 2 //无需替换   上报给客户端发送成功
	SenWordRetTypeEnum_CHECKERR      SenWordRetTypeEnum = 3 //校验失败   上报给客户端发送失败
	SenWordRetTypeEnum_CHECKSUC      SenWordRetTypeEnum = 4 //校验成功   上报给客户端发送成功
)

// Enum value maps for SenWordRetTypeEnum.
var (
	SenWordRetTypeEnum_name = map[int32]string{
		0: "UNDEFINED11",
		1: "REPLACESUC",
		2: "NONEEDREPLACE",
		3: "CHECKERR",
		4: "CHECKSUC",
	}
	SenWordRetTypeEnum_value = map[string]int32{
		"UNDEFINED11":   0,
		"REPLACESUC":    1,
		"NONEEDREPLACE": 2,
		"CHECKERR":      3,
		"CHECKSUC":      4,
	}
)

func (x SenWordRetTypeEnum) Enum() *SenWordRetTypeEnum {
	p := new(SenWordRetTypeEnum)
	*p = x
	return p
}

func (x SenWordRetTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SenWordRetTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_im_proto_enumTypes[16].Descriptor()
}

func (SenWordRetTypeEnum) Type() protoreflect.EnumType {
	return &file_im_proto_enumTypes[16]
}

func (x SenWordRetTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SenWordRetTypeEnum.Descriptor instead.
func (SenWordRetTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{16}
}

type ForwardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Out string `protobuf:"bytes,1,opt,name=Out,proto3" json:"Out,omitempty"`
}

func (x *ForwardResponse) Reset() {
	*x = ForwardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardResponse) ProtoMessage() {}

func (x *ForwardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardResponse.ProtoReflect.Descriptor instead.
func (*ForwardResponse) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{0}
}

func (x *ForwardResponse) GetOut() string {
	if x != nil {
		return x.Out
	}
	return ""
}

//***********  保存在redis中的用户信息       ************//
type UserRedisSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userstat     UserStatEnum   `protobuf:"varint,1,opt,name=userstat,proto3,enum=im.UserStatEnum" json:"userstat,omitempty"`        //用户状态
	Version      string         `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                                //sdk版本号
	DeviceType   DeviceTypeEnum `protobuf:"varint,3,opt,name=deviceType,proto3,enum=im.DeviceTypeEnum" json:"deviceType,omitempty"`  //device类型
	DeviceModel  string         `protobuf:"bytes,4,opt,name=deviceModel,proto3" json:"deviceModel,omitempty"`                        //device型号
	DeviceId     string         `protobuf:"bytes,5,opt,name=deviceId,proto3" json:"deviceId,omitempty"`                              //device ID
	MillipedeId  string         `protobuf:"bytes,6,opt,name=millipedeId,proto3" json:"millipedeId,omitempty"`                        //millipede ID
	PhoneType    PhoneTypeEnum  `protobuf:"varint,7,opt,name=phoneType,proto3,enum=im.PhoneTypeEnum" json:"phoneType,omitempty"`     //华为、小米、魅族  弃用， 改用PhoneTypeEnum
	PushToken    string         `protobuf:"bytes,8,opt,name=pushToken,proto3" json:"pushToken,omitempty"`                            //token,推送使用
	UnReadNum    int32          `protobuf:"varint,9,opt,name=unReadNum,proto3" json:"unReadNum,omitempty"`                           //未读消息数
	PushSwitch   PushSwitchEnum `protobuf:"varint,10,opt,name=pushSwitch,proto3,enum=im.PushSwitchEnum" json:"pushSwitch,omitempty"` //离线推送开关
	IsPushDetail int32          `protobuf:"varint,11,opt,name=isPushDetail,proto3" json:"isPushDetail,omitempty"`                    //推送是否显示详情，1:"昵称:消息",2:"您有一条新消息"
	PackageName  string         `protobuf:"bytes,12,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`    //安卓：应用包名，ios：bundle_id
	AppKey       string         `protobuf:"bytes,13,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
}

func (x *UserRedisSt) Reset() {
	*x = UserRedisSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRedisSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRedisSt) ProtoMessage() {}

func (x *UserRedisSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRedisSt.ProtoReflect.Descriptor instead.
func (*UserRedisSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{1}
}

func (x *UserRedisSt) GetUserstat() UserStatEnum {
	if x != nil {
		return x.Userstat
	}
	return UserStatEnum_UNDEFINED15
}

func (x *UserRedisSt) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UserRedisSt) GetDeviceType() DeviceTypeEnum {
	if x != nil {
		return x.DeviceType
	}
	return DeviceTypeEnum_UNDEFINED13
}

func (x *UserRedisSt) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *UserRedisSt) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *UserRedisSt) GetMillipedeId() string {
	if x != nil {
		return x.MillipedeId
	}
	return ""
}

func (x *UserRedisSt) GetPhoneType() PhoneTypeEnum {
	if x != nil {
		return x.PhoneType
	}
	return PhoneTypeEnum_UNDEFINED14
}

func (x *UserRedisSt) GetPushToken() string {
	if x != nil {
		return x.PushToken
	}
	return ""
}

func (x *UserRedisSt) GetUnReadNum() int32 {
	if x != nil {
		return x.UnReadNum
	}
	return 0
}

func (x *UserRedisSt) GetPushSwitch() PushSwitchEnum {
	if x != nil {
		return x.PushSwitch
	}
	return PushSwitchEnum_UNDEFINED16
}

func (x *UserRedisSt) GetIsPushDetail() int32 {
	if x != nil {
		return x.IsPushDetail
	}
	return 0
}

func (x *UserRedisSt) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *UserRedisSt) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

//***********       聊天消息体种类     ************//
//文本消息
type TxtContentSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Title   string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *TxtContentSt) Reset() {
	*x = TxtContentSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxtContentSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxtContentSt) ProtoMessage() {}

func (x *TxtContentSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxtContentSt.ProtoReflect.Descriptor instead.
func (*TxtContentSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{2}
}

func (x *TxtContentSt) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TxtContentSt) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type ImgContentSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileSize    int32  `protobuf:"varint,1,opt,name=fileSize,proto3" json:"fileSize,omitempty"`      //图片文件大小
	FileName    string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`       //图片文件名称
	Height      int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`          //图片高度
	Width       int32  `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`            //图片宽度
	IsOriginal  int32  `protobuf:"varint,5,opt,name=isOriginal,proto3" json:"isOriginal,omitempty"`  //是否发送原图，1：原图，2：非原图，即压缩图
	Url         string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`                 //原图url
	CompressUrl string `protobuf:"bytes,7,opt,name=compressUrl,proto3" json:"compressUrl,omitempty"` //压缩图url
	ThumbUrl    string `protobuf:"bytes,8,opt,name=thumbUrl,proto3" json:"thumbUrl,omitempty"`       //缩略图url
	// int32 thumbHeight = 5;  //图片高度
	// int32 thumbWidth = 6;   //图片宽度
	HashCode string `protobuf:"bytes,9,opt,name=hashCode,proto3" json:"hashCode,omitempty"` //文件的hashCode
}

func (x *ImgContentSt) Reset() {
	*x = ImgContentSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImgContentSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImgContentSt) ProtoMessage() {}

func (x *ImgContentSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImgContentSt.ProtoReflect.Descriptor instead.
func (*ImgContentSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{3}
}

func (x *ImgContentSt) GetFileSize() int32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *ImgContentSt) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ImgContentSt) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ImgContentSt) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ImgContentSt) GetIsOriginal() int32 {
	if x != nil {
		return x.IsOriginal
	}
	return 0
}

func (x *ImgContentSt) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ImgContentSt) GetCompressUrl() string {
	if x != nil {
		return x.CompressUrl
	}
	return ""
}

func (x *ImgContentSt) GetThumbUrl() string {
	if x != nil {
		return x.ThumbUrl
	}
	return ""
}

func (x *ImgContentSt) GetHashCode() string {
	if x != nil {
		return x.HashCode
	}
	return ""
}

type VoiceContentSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileSize int32  `protobuf:"varint,1,opt,name=fileSize,proto3" json:"fileSize,omitempty"` //语音文件大小
	FileName string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`  //语音文件名称
	Length   int32  `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`     //语音长度
	Url      string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`            //语音文件url地址
	HashCode string `protobuf:"bytes,5,opt,name=hashCode,proto3" json:"hashCode,omitempty"`  //文件的hashCode
}

func (x *VoiceContentSt) Reset() {
	*x = VoiceContentSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceContentSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceContentSt) ProtoMessage() {}

func (x *VoiceContentSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceContentSt.ProtoReflect.Descriptor instead.
func (*VoiceContentSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{4}
}

func (x *VoiceContentSt) GetFileSize() int32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *VoiceContentSt) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *VoiceContentSt) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *VoiceContentSt) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VoiceContentSt) GetHashCode() string {
	if x != nil {
		return x.HashCode
	}
	return ""
}

type VideoContentSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileSize       int32  `protobuf:"varint,1,opt,name=fileSize,proto3" json:"fileSize,omitempty"`            //视频文件大小
	FileName       string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`             //视频文件名称
	Length         int32  `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`                //视频长度
	Height         int32  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`                //视频缩略图高度
	Width          int32  `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`                  //视频缩略图宽度
	VideoUrl       string `protobuf:"bytes,6,opt,name=videoUrl,proto3" json:"videoUrl,omitempty"`             //视频文件url地址
	ImgThumbUrl    string `protobuf:"bytes,7,opt,name=imgThumbUrl,proto3" json:"imgThumbUrl,omitempty"`       //视频缩略图文件url地址(!sm)
	ImgCompressUrl string `protobuf:"bytes,8,opt,name=imgCompressUrl,proto3" json:"imgCompressUrl,omitempty"` //视频压缩图文件url地址(大图)
	HashCode       string `protobuf:"bytes,9,opt,name=hashCode,proto3" json:"hashCode,omitempty"`             //文件的hashCode
}

func (x *VideoContentSt) Reset() {
	*x = VideoContentSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoContentSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoContentSt) ProtoMessage() {}

func (x *VideoContentSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoContentSt.ProtoReflect.Descriptor instead.
func (*VideoContentSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{5}
}

func (x *VideoContentSt) GetFileSize() int32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *VideoContentSt) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *VideoContentSt) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *VideoContentSt) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VideoContentSt) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VideoContentSt) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *VideoContentSt) GetImgThumbUrl() string {
	if x != nil {
		return x.ImgThumbUrl
	}
	return ""
}

func (x *VideoContentSt) GetImgCompressUrl() string {
	if x != nil {
		return x.ImgCompressUrl
	}
	return ""
}

func (x *VideoContentSt) GetHashCode() string {
	if x != nil {
		return x.HashCode
	}
	return ""
}

type FileContentSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileSize   int32  `protobuf:"varint,1,opt,name=fileSize,proto3" json:"fileSize,omitempty"`     //文件大小
	FileName   string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`      //文件名称
	Url        string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`                //文件url地址
	SourceType int32  `protobuf:"varint,4,opt,name=sourceType,proto3" json:"sourceType,omitempty"` //默认0，普通文件，ui调用者填写该字段
	HashCode   string `protobuf:"bytes,5,opt,name=hashCode,proto3" json:"hashCode,omitempty"`      //文件的hashCode
}

func (x *FileContentSt) Reset() {
	*x = FileContentSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileContentSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileContentSt) ProtoMessage() {}

func (x *FileContentSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileContentSt.ProtoReflect.Descriptor instead.
func (*FileContentSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{6}
}

func (x *FileContentSt) GetFileSize() int32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *FileContentSt) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileContentSt) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FileContentSt) GetSourceType() int32 {
	if x != nil {
		return x.SourceType
	}
	return 0
}

func (x *FileContentSt) GetHashCode() string {
	if x != nil {
		return x.HashCode
	}
	return ""
}

type LocationContentSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`   //位置-纬度
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"` //位置-经度
	Des       string  `protobuf:"bytes,3,opt,name=des,proto3" json:"des,omitempty"`               //位置地址描述
}

func (x *LocationContentSt) Reset() {
	*x = LocationContentSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationContentSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationContentSt) ProtoMessage() {}

func (x *LocationContentSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationContentSt.ProtoReflect.Descriptor instead.
func (*LocationContentSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{7}
}

func (x *LocationContentSt) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *LocationContentSt) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *LocationContentSt) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

//撤回消息
type RecallContentSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerMsgId int64 `protobuf:"varint,1,opt,name=serverMsgId,proto3" json:"serverMsgId,omitempty"` //server端消息ID
}

func (x *RecallContentSt) Reset() {
	*x = RecallContentSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecallContentSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecallContentSt) ProtoMessage() {}

func (x *RecallContentSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecallContentSt.ProtoReflect.Descriptor instead.
func (*RecallContentSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{8}
}

func (x *RecallContentSt) GetServerMsgId() int64 {
	if x != nil {
		return x.ServerMsgId
	}
	return 0
}

//客户端消息已读消息
type ReadedContentSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerMsgId []int64 `protobuf:"varint,1,rep,packed,name=serverMsgId,proto3" json:"serverMsgId,omitempty"` //server端消息ID
}

func (x *ReadedContentSt) Reset() {
	*x = ReadedContentSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadedContentSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadedContentSt) ProtoMessage() {}

func (x *ReadedContentSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadedContentSt.ProtoReflect.Descriptor instead.
func (*ReadedContentSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{9}
}

func (x *ReadedContentSt) GetServerMsgId() []int64 {
	if x != nil {
		return x.ServerMsgId
	}
	return nil
}

//cmd消息
type CmdContentSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"` //1000--2000 预留 im sdk自用
}

func (x *CmdContentSt) Reset() {
	*x = CmdContentSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdContentSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdContentSt) ProtoMessage() {}

func (x *CmdContentSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdContentSt.ProtoReflect.Descriptor instead.
func (*CmdContentSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{10}
}

func (x *CmdContentSt) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

//@消息  特殊的文本消息  1/@几个人，则用userId,2/@all 则用isAll字段
type AtContentSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     []string `protobuf:"bytes,1,rep,name=userId,proto3" json:"userId,omitempty"`
	IsAll      int32    `protobuf:"varint,2,opt,name=isAll,proto3" json:"isAll,omitempty"`          //1:all
	TxtContent string   `protobuf:"bytes,3,opt,name=txtContent,proto3" json:"txtContent,omitempty"` //@username1, @username2,hello world
}

func (x *AtContentSt) Reset() {
	*x = AtContentSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtContentSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtContentSt) ProtoMessage() {}

func (x *AtContentSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtContentSt.ProtoReflect.Descriptor instead.
func (*AtContentSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{11}
}

func (x *AtContentSt) GetUserId() []string {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *AtContentSt) GetIsAll() int32 {
	if x != nil {
		return x.IsAll
	}
	return 0
}

func (x *AtContentSt) GetTxtContent() string {
	if x != nil {
		return x.TxtContent
	}
	return ""
}

//业务消息
type BuzContentSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TendId        string `protobuf:"bytes,1,opt,name=tendId,proto3" json:"tendId,omitempty"`
	ModuleName    string `protobuf:"bytes,2,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
	ModuleType    int32  `protobuf:"varint,3,opt,name=moduleType,proto3" json:"moduleType,omitempty"`
	OpenStatus    int32  `protobuf:"varint,4,opt,name=openStatus,proto3" json:"openStatus,omitempty"`
	OpenType      int32  `protobuf:"varint,5,opt,name=openType,proto3" json:"openType,omitempty"`
	Pcurl         string `protobuf:"bytes,6,opt,name=pcurl,proto3" json:"pcurl,omitempty"`
	Murl          string `protobuf:"bytes,7,opt,name=murl,proto3" json:"murl,omitempty"`
	ModuleIconUrl string `protobuf:"bytes,8,opt,name=moduleIconUrl,proto3" json:"moduleIconUrl,omitempty"`
	Cname         string `protobuf:"bytes,9,opt,name=cname,proto3" json:"cname,omitempty"`
}

func (x *BuzContentSt) Reset() {
	*x = BuzContentSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuzContentSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuzContentSt) ProtoMessage() {}

func (x *BuzContentSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuzContentSt.ProtoReflect.Descriptor instead.
func (*BuzContentSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{12}
}

func (x *BuzContentSt) GetTendId() string {
	if x != nil {
		return x.TendId
	}
	return ""
}

func (x *BuzContentSt) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *BuzContentSt) GetModuleType() int32 {
	if x != nil {
		return x.ModuleType
	}
	return 0
}

func (x *BuzContentSt) GetOpenStatus() int32 {
	if x != nil {
		return x.OpenStatus
	}
	return 0
}

func (x *BuzContentSt) GetOpenType() int32 {
	if x != nil {
		return x.OpenType
	}
	return 0
}

func (x *BuzContentSt) GetPcurl() string {
	if x != nil {
		return x.Pcurl
	}
	return ""
}

func (x *BuzContentSt) GetMurl() string {
	if x != nil {
		return x.Murl
	}
	return ""
}

func (x *BuzContentSt) GetModuleIconUrl() string {
	if x != nil {
		return x.ModuleIconUrl
	}
	return ""
}

func (x *BuzContentSt) GetCname() string {
	if x != nil {
		return x.Cname
	}
	return ""
}

//***********       GROUP消息体种类     ************//
//群详情
type GroupDetailSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId      string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`           //群ID
	CompanyId    string `protobuf:"bytes,2,opt,name=companyId,proto3" json:"companyId,omitempty"`       //公司ID
	AppName      string `protobuf:"bytes,3,opt,name=appName,proto3" json:"appName,omitempty"`           //
	OwnerId      string `protobuf:"bytes,4,opt,name=ownerId,proto3" json:"ownerId,omitempty"`           //群主id
	Name         string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                 //群名称
	Des          string `protobuf:"bytes,6,opt,name=des,proto3" json:"des,omitempty"`                   //群描述
	Announcement string `protobuf:"bytes,7,opt,name=announcement,proto3" json:"announcement,omitempty"` //群公告
	MaxUserNum   int32  `protobuf:"varint,8,opt,name=maxUserNum,proto3" json:"maxUserNum,omitempty"`    //群最大成员
	AvatarUrl    string `protobuf:"bytes,9,opt,name=avatarUrl,proto3" json:"avatarUrl,omitempty"`       //群头像
	IsTop        int32  `protobuf:"varint,10,opt,name=isTop,proto3" json:"isTop,omitempty"`             //1:置顶,2:不置顶
	TopTime      int64  `protobuf:"varint,11,opt,name=topTime,proto3" json:"topTime,omitempty"`         //置顶时间
	IsDisturb    int32  `protobuf:"varint,12,opt,name=isDisturb,proto3" json:"isDisturb,omitempty"`     //1:免打扰,2:打扰
	Ext          string `protobuf:"bytes,13,opt,name=ext,proto3" json:"ext,omitempty"`                  //扩展字段
	MemberNum    int32  `protobuf:"varint,14,opt,name=memberNum,proto3" json:"memberNum,omitempty"`     //群人数
}

func (x *GroupDetailSt) Reset() {
	*x = GroupDetailSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDetailSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDetailSt) ProtoMessage() {}

func (x *GroupDetailSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDetailSt.ProtoReflect.Descriptor instead.
func (*GroupDetailSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{13}
}

func (x *GroupDetailSt) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupDetailSt) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *GroupDetailSt) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *GroupDetailSt) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *GroupDetailSt) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupDetailSt) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

func (x *GroupDetailSt) GetAnnouncement() string {
	if x != nil {
		return x.Announcement
	}
	return ""
}

func (x *GroupDetailSt) GetMaxUserNum() int32 {
	if x != nil {
		return x.MaxUserNum
	}
	return 0
}

func (x *GroupDetailSt) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *GroupDetailSt) GetIsTop() int32 {
	if x != nil {
		return x.IsTop
	}
	return 0
}

func (x *GroupDetailSt) GetTopTime() int64 {
	if x != nil {
		return x.TopTime
	}
	return 0
}

func (x *GroupDetailSt) GetIsDisturb() int32 {
	if x != nil {
		return x.IsDisturb
	}
	return 0
}

func (x *GroupDetailSt) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

func (x *GroupDetailSt) GetMemberNum() int32 {
	if x != nil {
		return x.MemberNum
	}
	return 0
}

//群成员
type GroupMembersSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string   `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"` //群ID
	UserId  []string `protobuf:"bytes,2,rep,name=userId,proto3" json:"userId,omitempty"`   //群成员ID
}

func (x *GroupMembersSt) Reset() {
	*x = GroupMembersSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMembersSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMembersSt) ProtoMessage() {}

func (x *GroupMembersSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMembersSt.ProtoReflect.Descriptor instead.
func (*GroupMembersSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{14}
}

func (x *GroupMembersSt) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupMembersSt) GetUserId() []string {
	if x != nil {
		return x.UserId
	}
	return nil
}

//邀请入群
type GroupAddMemSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`         //邀请者userID
	AddUid   []string `protobuf:"bytes,2,rep,name=addUid,proto3" json:"addUid,omitempty"`   //被邀请者userID
	GroupId  string   `protobuf:"bytes,3,opt,name=groupId,proto3" json:"groupId,omitempty"` //群ID
	UserInfo []string `protobuf:"bytes,4,rep,name=userInfo,proto3" json:"userInfo,omitempty"`
}

func (x *GroupAddMemSt) Reset() {
	*x = GroupAddMemSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupAddMemSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupAddMemSt) ProtoMessage() {}

func (x *GroupAddMemSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupAddMemSt.ProtoReflect.Descriptor instead.
func (*GroupAddMemSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{15}
}

func (x *GroupAddMemSt) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GroupAddMemSt) GetAddUid() []string {
	if x != nil {
		return x.AddUid
	}
	return nil
}

func (x *GroupAddMemSt) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupAddMemSt) GetUserInfo() []string {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

//删除群成员(群主或企业管理员)
type GroupDelMemSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperId  string   `protobuf:"bytes,1,opt,name=operId,proto3" json:"operId,omitempty"`   //操作者ID(群主id或server)
	DelUid  []string `protobuf:"bytes,2,rep,name=delUid,proto3" json:"delUid,omitempty"`   //被删除者userID
	GroupId string   `protobuf:"bytes,3,opt,name=groupId,proto3" json:"groupId,omitempty"` //群ID
}

func (x *GroupDelMemSt) Reset() {
	*x = GroupDelMemSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDelMemSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDelMemSt) ProtoMessage() {}

func (x *GroupDelMemSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDelMemSt.ProtoReflect.Descriptor instead.
func (*GroupDelMemSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{16}
}

func (x *GroupDelMemSt) GetOperId() string {
	if x != nil {
		return x.OperId
	}
	return ""
}

func (x *GroupDelMemSt) GetDelUid() []string {
	if x != nil {
		return x.DelUid
	}
	return nil
}

func (x *GroupDelMemSt) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

//群成员主动退群
type GroupMemQuitSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuitUid     string `protobuf:"bytes,1,opt,name=quitUid,proto3" json:"quitUid,omitempty"`         //退出者userID
	NewOwnerUid string `protobuf:"bytes,2,opt,name=newOwnerUid,proto3" json:"newOwnerUid,omitempty"` //新群主(如果退出者为群主)
	GroupId     string `protobuf:"bytes,3,opt,name=groupId,proto3" json:"groupId,omitempty"`         //群ID
}

func (x *GroupMemQuitSt) Reset() {
	*x = GroupMemQuitSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemQuitSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemQuitSt) ProtoMessage() {}

func (x *GroupMemQuitSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemQuitSt.ProtoReflect.Descriptor instead.
func (*GroupMemQuitSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{17}
}

func (x *GroupMemQuitSt) GetQuitUid() string {
	if x != nil {
		return x.QuitUid
	}
	return ""
}

func (x *GroupMemQuitSt) GetNewOwnerUid() string {
	if x != nil {
		return x.NewOwnerUid
	}
	return ""
}

func (x *GroupMemQuitSt) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

//群主或企业管理员将群解散
type GroupDismissSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperId  string `protobuf:"bytes,1,opt,name=operId,proto3" json:"operId,omitempty"`   //操作者ID(群主id或server)
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"` //群ID
}

func (x *GroupDismissSt) Reset() {
	*x = GroupDismissSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDismissSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDismissSt) ProtoMessage() {}

func (x *GroupDismissSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDismissSt.ProtoReflect.Descriptor instead.
func (*GroupDismissSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{18}
}

func (x *GroupDismissSt) GetOperId() string {
	if x != nil {
		return x.OperId
	}
	return ""
}

func (x *GroupDismissSt) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

//更改群主
type GroupChangeOwnerSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldOwnerUid string `protobuf:"bytes,1,opt,name=oldOwnerUid,proto3" json:"oldOwnerUid,omitempty"` //老群主userID
	NewOwnerUid string `protobuf:"bytes,2,opt,name=newOwnerUid,proto3" json:"newOwnerUid,omitempty"` //新群主userID
	GroupId     string `protobuf:"bytes,3,opt,name=groupId,proto3" json:"groupId,omitempty"`         //群ID
	OperId      string `protobuf:"bytes,4,opt,name=operId,proto3" json:"operId,omitempty"`           //操作者ID(群主id或server)
}

func (x *GroupChangeOwnerSt) Reset() {
	*x = GroupChangeOwnerSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChangeOwnerSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChangeOwnerSt) ProtoMessage() {}

func (x *GroupChangeOwnerSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChangeOwnerSt.ProtoReflect.Descriptor instead.
func (*GroupChangeOwnerSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{19}
}

func (x *GroupChangeOwnerSt) GetOldOwnerUid() string {
	if x != nil {
		return x.OldOwnerUid
	}
	return ""
}

func (x *GroupChangeOwnerSt) GetNewOwnerUid() string {
	if x != nil {
		return x.NewOwnerUid
	}
	return ""
}

func (x *GroupChangeOwnerSt) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupChangeOwnerSt) GetOperId() string {
	if x != nil {
		return x.OperId
	}
	return ""
}

//更改群名
type GroupChangeNameSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewName string `protobuf:"bytes,1,opt,name=newName,proto3" json:"newName,omitempty"` //新群名
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"` //群ID
	OperId  string `protobuf:"bytes,3,opt,name=operId,proto3" json:"operId,omitempty"`   //操作者ID(群主id或server)
}

func (x *GroupChangeNameSt) Reset() {
	*x = GroupChangeNameSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChangeNameSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChangeNameSt) ProtoMessage() {}

func (x *GroupChangeNameSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChangeNameSt.ProtoReflect.Descriptor instead.
func (*GroupChangeNameSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{20}
}

func (x *GroupChangeNameSt) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *GroupChangeNameSt) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupChangeNameSt) GetOperId() string {
	if x != nil {
		return x.OperId
	}
	return ""
}

//更改群头像
type GroupChangeAvatarSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewUrl  string `protobuf:"bytes,1,opt,name=newUrl,proto3" json:"newUrl,omitempty"`   //新群头像
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"` //群ID
	OperId  string `protobuf:"bytes,3,opt,name=operId,proto3" json:"operId,omitempty"`   //操作者ID(群主id或server)
}

func (x *GroupChangeAvatarSt) Reset() {
	*x = GroupChangeAvatarSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChangeAvatarSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChangeAvatarSt) ProtoMessage() {}

func (x *GroupChangeAvatarSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChangeAvatarSt.ProtoReflect.Descriptor instead.
func (*GroupChangeAvatarSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{21}
}

func (x *GroupChangeAvatarSt) GetNewUrl() string {
	if x != nil {
		return x.NewUrl
	}
	return ""
}

func (x *GroupChangeAvatarSt) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupChangeAvatarSt) GetOperId() string {
	if x != nil {
		return x.OperId
	}
	return ""
}

//更改群配置
type GroupChangeTopSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`  //群ID
	IsTop   int32  `protobuf:"varint,2,opt,name=isTop,proto3" json:"isTop,omitempty"`     //1:置顶,2:不置顶
	TopTime int64  `protobuf:"varint,3,opt,name=topTime,proto3" json:"topTime,omitempty"` //置顶时间
}

func (x *GroupChangeTopSt) Reset() {
	*x = GroupChangeTopSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChangeTopSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChangeTopSt) ProtoMessage() {}

func (x *GroupChangeTopSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChangeTopSt.ProtoReflect.Descriptor instead.
func (*GroupChangeTopSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{22}
}

func (x *GroupChangeTopSt) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupChangeTopSt) GetIsTop() int32 {
	if x != nil {
		return x.IsTop
	}
	return 0
}

func (x *GroupChangeTopSt) GetTopTime() int64 {
	if x != nil {
		return x.TopTime
	}
	return 0
}

type GroupChangeDisturbSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`      //群ID
	IsDisturb int32  `protobuf:"varint,2,opt,name=isDisturb,proto3" json:"isDisturb,omitempty"` //1:免打扰,2:打扰
}

func (x *GroupChangeDisturbSt) Reset() {
	*x = GroupChangeDisturbSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChangeDisturbSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChangeDisturbSt) ProtoMessage() {}

func (x *GroupChangeDisturbSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChangeDisturbSt.ProtoReflect.Descriptor instead.
func (*GroupChangeDisturbSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{23}
}

func (x *GroupChangeDisturbSt) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupChangeDisturbSt) GetIsDisturb() int32 {
	if x != nil {
		return x.IsDisturb
	}
	return 0
}

//更改群描述
type GroupChangeDesSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewDes  string `protobuf:"bytes,1,opt,name=newDes,proto3" json:"newDes,omitempty"`   //新群描述
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"` //群ID
	OperId  string `protobuf:"bytes,3,opt,name=operId,proto3" json:"operId,omitempty"`   //操作者ID(群主id或server)
}

func (x *GroupChangeDesSt) Reset() {
	*x = GroupChangeDesSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChangeDesSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChangeDesSt) ProtoMessage() {}

func (x *GroupChangeDesSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChangeDesSt.ProtoReflect.Descriptor instead.
func (*GroupChangeDesSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{24}
}

func (x *GroupChangeDesSt) GetNewDes() string {
	if x != nil {
		return x.NewDes
	}
	return ""
}

func (x *GroupChangeDesSt) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupChangeDesSt) GetOperId() string {
	if x != nil {
		return x.OperId
	}
	return ""
}

//更改群公告
type GroupChangeAnnounceSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewAnnounce string `protobuf:"bytes,1,opt,name=newAnnounce,proto3" json:"newAnnounce,omitempty"` //新群公告
	GroupId     string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`         //群ID
	OperId      string `protobuf:"bytes,3,opt,name=operId,proto3" json:"operId,omitempty"`           //操作者ID(群主id或server)
}

func (x *GroupChangeAnnounceSt) Reset() {
	*x = GroupChangeAnnounceSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChangeAnnounceSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChangeAnnounceSt) ProtoMessage() {}

func (x *GroupChangeAnnounceSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChangeAnnounceSt.ProtoReflect.Descriptor instead.
func (*GroupChangeAnnounceSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{25}
}

func (x *GroupChangeAnnounceSt) GetNewAnnounce() string {
	if x != nil {
		return x.NewAnnounce
	}
	return ""
}

func (x *GroupChangeAnnounceSt) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupChangeAnnounceSt) GetOperId() string {
	if x != nil {
		return x.OperId
	}
	return ""
}

//更改群成员上限
type GroupChangeMaxUsersSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewMaxUsers int32  `protobuf:"varint,1,opt,name=newMaxUsers,proto3" json:"newMaxUsers,omitempty"` //新群成员上限
	GroupId     string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`          //群ID
	OperId      string `protobuf:"bytes,3,opt,name=operId,proto3" json:"operId,omitempty"`            //操作者ID(群主id或server)
}

func (x *GroupChangeMaxUsersSt) Reset() {
	*x = GroupChangeMaxUsersSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChangeMaxUsersSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChangeMaxUsersSt) ProtoMessage() {}

func (x *GroupChangeMaxUsersSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChangeMaxUsersSt.ProtoReflect.Descriptor instead.
func (*GroupChangeMaxUsersSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{26}
}

func (x *GroupChangeMaxUsersSt) GetNewMaxUsers() int32 {
	if x != nil {
		return x.NewMaxUsers
	}
	return 0
}

func (x *GroupChangeMaxUsersSt) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupChangeMaxUsersSt) GetOperId() string {
	if x != nil {
		return x.OperId
	}
	return ""
}

//用户信息
type ConfUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`     //
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"` //
	Photo    string `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`       //头像url
}

func (x *ConfUserInfo) Reset() {
	*x = ConfUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfUserInfo) ProtoMessage() {}

func (x *ConfUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfUserInfo.ProtoReflect.Descriptor instead.
func (*ConfUserInfo) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{27}
}

func (x *ConfUserInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ConfUserInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ConfUserInfo) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

//视频会议消息体
type CommonContentSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfId   int64           `protobuf:"varint,1,opt,name=confId,proto3" json:"confId,omitempty"`
	UserList []*ConfUserInfo `protobuf:"bytes,2,rep,name=userList,proto3" json:"userList,omitempty"`
	ConfType int64           `protobuf:"varint,3,opt,name=confType,proto3" json:"confType,omitempty"` //音频、视频
	Creater  *ConfUserInfo   `protobuf:"bytes,4,opt,name=creater,proto3" json:"creater,omitempty"`
	Session  *ChatSession    `protobuf:"bytes,5,opt,name=session,proto3" json:"session,omitempty"`
	Password string          `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *CommonContentSt) Reset() {
	*x = CommonContentSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonContentSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonContentSt) ProtoMessage() {}

func (x *CommonContentSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonContentSt.ProtoReflect.Descriptor instead.
func (*CommonContentSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{28}
}

func (x *CommonContentSt) GetConfId() int64 {
	if x != nil {
		return x.ConfId
	}
	return 0
}

func (x *CommonContentSt) GetUserList() []*ConfUserInfo {
	if x != nil {
		return x.UserList
	}
	return nil
}

func (x *CommonContentSt) GetConfType() int64 {
	if x != nil {
		return x.ConfType
	}
	return 0
}

func (x *CommonContentSt) GetCreater() *ConfUserInfo {
	if x != nil {
		return x.Creater
	}
	return nil
}

func (x *CommonContentSt) GetSession() *ChatSession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *CommonContentSt) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

//视频会议消息
type ConfMsgSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfType      ConfTypeEnum     `protobuf:"varint,1,opt,name=confType,proto3,enum=im.ConfTypeEnum" json:"confType,omitempty"` //消息体类型
	Ext           []byte           `protobuf:"bytes,2,opt,name=ext,proto3" json:"ext,omitempty"`                                 //扩展字段
	CommonContent *CommonContentSt `protobuf:"bytes,3,opt,name=commonContent,proto3" json:"commonContent,omitempty"`             //通用视频会议消息体,邀请、同意、拒绝都对应这个消息体
}

func (x *ConfMsgSt) Reset() {
	*x = ConfMsgSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfMsgSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfMsgSt) ProtoMessage() {}

func (x *ConfMsgSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfMsgSt.ProtoReflect.Descriptor instead.
func (*ConfMsgSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{29}
}

func (x *ConfMsgSt) GetConfType() ConfTypeEnum {
	if x != nil {
		return x.ConfType
	}
	return ConfTypeEnum_UNDEFINED5
}

func (x *ConfMsgSt) GetExt() []byte {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *ConfMsgSt) GetCommonContent() *CommonContentSt {
	if x != nil {
		return x.CommonContent
	}
	return nil
}

//视频session
type ChatSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	SessionType int64  `protobuf:"varint,2,opt,name=sessionType,proto3" json:"sessionType,omitempty"`
}

func (x *ChatSession) Reset() {
	*x = ChatSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatSession) ProtoMessage() {}

func (x *ChatSession) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatSession.ProtoReflect.Descriptor instead.
func (*ChatSession) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{30}
}

func (x *ChatSession) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ChatSession) GetSessionType() int64 {
	if x != nil {
		return x.SessionType
	}
	return 0
}

//用户信息
type CallUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`     //app_key_uid
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"` //
	Photo    string `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`       //头像url
}

func (x *CallUserInfo) Reset() {
	*x = CallUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallUserInfo) ProtoMessage() {}

func (x *CallUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallUserInfo.ProtoReflect.Descriptor instead.
func (*CallUserInfo) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{31}
}

func (x *CallUserInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CallUserInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CallUserInfo) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

//Call服务器消息体  创建者从queen获取的
type CallServerSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColliderUrl  string `protobuf:"bytes,1,opt,name=colliderUrl,proto3" json:"colliderUrl,omitempty"`
	TurnUrl      string `protobuf:"bytes,2,opt,name=turnUrl,proto3" json:"turnUrl,omitempty"`
	TurnUsername string `protobuf:"bytes,3,opt,name=turnUsername,proto3" json:"turnUsername,omitempty"`
	TurnPassword string `protobuf:"bytes,4,opt,name=turnPassword,proto3" json:"turnPassword,omitempty"`
}

func (x *CallServerSt) Reset() {
	*x = CallServerSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallServerSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallServerSt) ProtoMessage() {}

func (x *CallServerSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallServerSt.ProtoReflect.Descriptor instead.
func (*CallServerSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{32}
}

func (x *CallServerSt) GetColliderUrl() string {
	if x != nil {
		return x.ColliderUrl
	}
	return ""
}

func (x *CallServerSt) GetTurnUrl() string {
	if x != nil {
		return x.TurnUrl
	}
	return ""
}

func (x *CallServerSt) GetTurnUsername() string {
	if x != nil {
		return x.TurnUsername
	}
	return ""
}

func (x *CallServerSt) GetTurnPassword() string {
	if x != nil {
		return x.TurnPassword
	}
	return ""
}

type CallCreateSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creater     *CallUserInfo   `protobuf:"bytes,1,opt,name=creater,proto3" json:"creater,omitempty"`
	InviterList []*CallUserInfo `protobuf:"bytes,2,rep,name=inviterList,proto3" json:"inviterList,omitempty"`
	RoomType    RoomTypeEnum    `protobuf:"varint,3,opt,name=RoomType,proto3,enum=im.RoomTypeEnum" json:"RoomType,omitempty"`
	ChatType    int64           `protobuf:"varint,4,opt,name=chatType,proto3" json:"chatType,omitempty"` //1：音频、2：视频
	Session     *ChatSession    `protobuf:"bytes,5,opt,name=session,proto3" json:"session,omitempty"`
	CallServer  *CallServerSt   `protobuf:"bytes,6,opt,name=CallServer,proto3" json:"CallServer,omitempty"` //服务器信息
}

func (x *CallCreateSt) Reset() {
	*x = CallCreateSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallCreateSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallCreateSt) ProtoMessage() {}

func (x *CallCreateSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallCreateSt.ProtoReflect.Descriptor instead.
func (*CallCreateSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{33}
}

func (x *CallCreateSt) GetCreater() *CallUserInfo {
	if x != nil {
		return x.Creater
	}
	return nil
}

func (x *CallCreateSt) GetInviterList() []*CallUserInfo {
	if x != nil {
		return x.InviterList
	}
	return nil
}

func (x *CallCreateSt) GetRoomType() RoomTypeEnum {
	if x != nil {
		return x.RoomType
	}
	return RoomTypeEnum_UNDEFINED7
}

func (x *CallCreateSt) GetChatType() int64 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *CallCreateSt) GetSession() *ChatSession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *CallCreateSt) GetCallServer() *CallServerSt {
	if x != nil {
		return x.CallServer
	}
	return nil
}

type CallJoinSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId string `protobuf:"bytes,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
}

func (x *CallJoinSt) Reset() {
	*x = CallJoinSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallJoinSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallJoinSt) ProtoMessage() {}

func (x *CallJoinSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallJoinSt.ProtoReflect.Descriptor instead.
func (*CallJoinSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{34}
}

func (x *CallJoinSt) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

type CallDataSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` //offer、andidate数据
}

func (x *CallDataSt) Reset() {
	*x = CallDataSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallDataSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallDataSt) ProtoMessage() {}

func (x *CallDataSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallDataSt.ProtoReflect.Descriptor instead.
func (*CallDataSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{35}
}

func (x *CallDataSt) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CallAnswerSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` //answer数据
}

func (x *CallAnswerSt) Reset() {
	*x = CallAnswerSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallAnswerSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallAnswerSt) ProtoMessage() {}

func (x *CallAnswerSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallAnswerSt.ProtoReflect.Descriptor instead.
func (*CallAnswerSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{36}
}

func (x *CallAnswerSt) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CallRejoinSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId string `protobuf:"bytes,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
}

func (x *CallRejoinSt) Reset() {
	*x = CallRejoinSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallRejoinSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallRejoinSt) ProtoMessage() {}

func (x *CallRejoinSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallRejoinSt.ProtoReflect.Descriptor instead.
func (*CallRejoinSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{37}
}

func (x *CallRejoinSt) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

//客户端回ack消息
type Cli2SerAckMsgSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerMsgId []int64 `protobuf:"varint,1,rep,packed,name=serverMsgId,proto3" json:"serverMsgId,omitempty"` //client向server端回ack,可一次回多条
}

func (x *Cli2SerAckMsgSt) Reset() {
	*x = Cli2SerAckMsgSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cli2SerAckMsgSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cli2SerAckMsgSt) ProtoMessage() {}

func (x *Cli2SerAckMsgSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cli2SerAckMsgSt.ProtoReflect.Descriptor instead.
func (*Cli2SerAckMsgSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{38}
}

func (x *Cli2SerAckMsgSt) GetServerMsgId() []int64 {
	if x != nil {
		return x.ServerMsgId
	}
	return nil
}

//服务端回ack消息,ack带有client消息ID和对应的server端消息ID,server端消息ID在ack结构体外
type Ser2CliAckMsgSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallType    CallTypeEnum `protobuf:"varint,1,opt,name=CallType,proto3,enum=im.CallTypeEnum" json:"CallType,omitempty"` //消息类型
	ClientMsgId int64        `protobuf:"varint,2,opt,name=clientMsgId,proto3" json:"clientMsgId,omitempty"`                //客户端消息ID
	Des         string       `protobuf:"bytes,3,opt,name=des,proto3" json:"des,omitempty"`                                 //当返回错误时，msg会返回最新登陆的客户端的描述信息，可以直接用于客户端的显示
	RoomId      string       `protobuf:"bytes,4,opt,name=roomId,proto3" json:"roomId,omitempty"`
	//    im_err.ErrEnum code = 5;      //返回状态码
	Code string `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"` //返回状态码
}

func (x *Ser2CliAckMsgSt) Reset() {
	*x = Ser2CliAckMsgSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ser2CliAckMsgSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ser2CliAckMsgSt) ProtoMessage() {}

func (x *Ser2CliAckMsgSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ser2CliAckMsgSt.ProtoReflect.Descriptor instead.
func (*Ser2CliAckMsgSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{39}
}

func (x *Ser2CliAckMsgSt) GetCallType() CallTypeEnum {
	if x != nil {
		return x.CallType
	}
	return CallTypeEnum_UNDEFINED6
}

func (x *Ser2CliAckMsgSt) GetClientMsgId() int64 {
	if x != nil {
		return x.ClientMsgId
	}
	return 0
}

func (x *Ser2CliAckMsgSt) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

func (x *Ser2CliAckMsgSt) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *Ser2CliAckMsgSt) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

//CallWs消息
type CallWsMsgst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientMsgId   int64            `protobuf:"varint,1,opt,name=clientMsgId,proto3" json:"clientMsgId,omitempty"`                //client消息ID
	ServerMsgId   int64            `protobuf:"varint,2,opt,name=serverMsgId,proto3" json:"serverMsgId,omitempty"`                //server端消息ID
	Description   string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                 //提示
	CallType      CallTypeEnum     `protobuf:"varint,4,opt,name=callType,proto3,enum=im.CallTypeEnum" json:"callType,omitempty"` //消息体类型
	Ext           []byte           `protobuf:"bytes,5,opt,name=ext,proto3" json:"ext,omitempty"`                                 //扩展字段
	Cli2SerAckMsg *Cli2SerAckMsgSt `protobuf:"bytes,6,opt,name=cli2serAckMsg,proto3" json:"cli2serAckMsg,omitempty"`             //client向server发送ack
	CallCreate    *CallCreateSt    `protobuf:"bytes,7,opt,name=callCreate,proto3" json:"callCreate,omitempty"`
	CallJoin      *CallJoinSt      `protobuf:"bytes,8,opt,name=callJoin,proto3" json:"callJoin,omitempty"`
	CallData      *CallDataSt      `protobuf:"bytes,9,opt,name=callData,proto3" json:"callData,omitempty"`
	CallAnswer    *CallAnswerSt    `protobuf:"bytes,10,opt,name=callAnswer,proto3" json:"callAnswer,omitempty"`
	CallRejoin    *CallRejoinSt    `protobuf:"bytes,11,opt,name=callRejoin,proto3" json:"callRejoin,omitempty"`
	Ser2CliAckMsg *Ser2CliAckMsgSt `protobuf:"bytes,12,opt,name=ser2cliAckMsg,proto3" json:"ser2cliAckMsg,omitempty"` //server向client发送ack
}

func (x *CallWsMsgst) Reset() {
	*x = CallWsMsgst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallWsMsgst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallWsMsgst) ProtoMessage() {}

func (x *CallWsMsgst) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallWsMsgst.ProtoReflect.Descriptor instead.
func (*CallWsMsgst) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{40}
}

func (x *CallWsMsgst) GetClientMsgId() int64 {
	if x != nil {
		return x.ClientMsgId
	}
	return 0
}

func (x *CallWsMsgst) GetServerMsgId() int64 {
	if x != nil {
		return x.ServerMsgId
	}
	return 0
}

func (x *CallWsMsgst) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CallWsMsgst) GetCallType() CallTypeEnum {
	if x != nil {
		return x.CallType
	}
	return CallTypeEnum_UNDEFINED6
}

func (x *CallWsMsgst) GetExt() []byte {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *CallWsMsgst) GetCli2SerAckMsg() *Cli2SerAckMsgSt {
	if x != nil {
		return x.Cli2SerAckMsg
	}
	return nil
}

func (x *CallWsMsgst) GetCallCreate() *CallCreateSt {
	if x != nil {
		return x.CallCreate
	}
	return nil
}

func (x *CallWsMsgst) GetCallJoin() *CallJoinSt {
	if x != nil {
		return x.CallJoin
	}
	return nil
}

func (x *CallWsMsgst) GetCallData() *CallDataSt {
	if x != nil {
		return x.CallData
	}
	return nil
}

func (x *CallWsMsgst) GetCallAnswer() *CallAnswerSt {
	if x != nil {
		return x.CallAnswer
	}
	return nil
}

func (x *CallWsMsgst) GetCallRejoin() *CallRejoinSt {
	if x != nil {
		return x.CallRejoin
	}
	return nil
}

func (x *CallWsMsgst) GetSer2CliAckMsg() *Ser2CliAckMsgSt {
	if x != nil {
		return x.Ser2CliAckMsg
	}
	return nil
}

type CallMsgst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string          `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`                 //提示
	CallType    CallTypeEnum    `protobuf:"varint,2,opt,name=CallType,proto3,enum=im.CallTypeEnum" json:"CallType,omitempty"` //消息体类型
	Ext         []byte          `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext,omitempty"`                                 //扩展字段
	Creater     *CallUserInfo   `protobuf:"bytes,4,opt,name=creater,proto3" json:"creater,omitempty"`
	InviterList []*CallUserInfo `protobuf:"bytes,5,rep,name=inviterList,proto3" json:"inviterList,omitempty"`
	RoomId      string          `protobuf:"bytes,6,opt,name=roomId,proto3" json:"roomId,omitempty"`
	RoomType    RoomTypeEnum    `protobuf:"varint,7,opt,name=RoomType,proto3,enum=im.RoomTypeEnum" json:"RoomType,omitempty"`
	ChatType    int64           `protobuf:"varint,8,opt,name=chatType,proto3" json:"chatType,omitempty"` //1：音频、2：视频
	Session     *ChatSession    `protobuf:"bytes,9,opt,name=session,proto3" json:"session,omitempty"`
	CallServer  *CallServerSt   `protobuf:"bytes,10,opt,name=CallServer,proto3" json:"CallServer,omitempty"` //服务器信息
}

func (x *CallMsgst) Reset() {
	*x = CallMsgst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallMsgst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallMsgst) ProtoMessage() {}

func (x *CallMsgst) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallMsgst.ProtoReflect.Descriptor instead.
func (*CallMsgst) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{41}
}

func (x *CallMsgst) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CallMsgst) GetCallType() CallTypeEnum {
	if x != nil {
		return x.CallType
	}
	return CallTypeEnum_UNDEFINED6
}

func (x *CallMsgst) GetExt() []byte {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *CallMsgst) GetCreater() *CallUserInfo {
	if x != nil {
		return x.Creater
	}
	return nil
}

func (x *CallMsgst) GetInviterList() []*CallUserInfo {
	if x != nil {
		return x.InviterList
	}
	return nil
}

func (x *CallMsgst) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *CallMsgst) GetRoomType() RoomTypeEnum {
	if x != nil {
		return x.RoomType
	}
	return RoomTypeEnum_UNDEFINED7
}

func (x *CallMsgst) GetChatType() int64 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *CallMsgst) GetSession() *ChatSession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *CallMsgst) GetCallServer() *CallServerSt {
	if x != nil {
		return x.CallServer
	}
	return nil
}

type RedPktMsgst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ext            []byte            `protobuf:"bytes,1,opt,name=ext,proto3" json:"ext,omitempty"`                                                //扩展字段
	Title          string            `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                            //提示  发用
	OutBizNo       string            `protobuf:"bytes,3,opt,name=outBizNo,proto3" json:"outBizNo,omitempty"`                                      //红包id 唯一标识
	RedpktMsgType  RedPktMsgTypeEnum `protobuf:"varint,4,opt,name=redpktMsgType,proto3,enum=im.RedPktMsgTypeEnum" json:"redpktMsgType,omitempty"` //消息体类型 收、发、过期 用
	RedpktType     RedPktTypeEnum    `protobuf:"varint,5,opt,name=redpktType,proto3,enum=im.RedPktTypeEnum" json:"redpktType,omitempty"`          //红包类型 收、发、过期 用
	Amount         float64           `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`                                        //金额 发红包用
	SenderNickName string            `protobuf:"bytes,7,opt,name=senderNickName,proto3" json:"senderNickName,omitempty"`                          //发红包人的昵称  发红包用
	SenderPicUrl   string            `protobuf:"bytes,8,opt,name=senderPicUrl,proto3" json:"senderPicUrl,omitempty"`                              //发红包人的头像  发红包用
	RedPktState    RedPktStateEnum   `protobuf:"varint,9,opt,name=redPktState,proto3,enum=im.RedPktStateEnum" json:"redPktState,omitempty"`       //红包状态
}

func (x *RedPktMsgst) Reset() {
	*x = RedPktMsgst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedPktMsgst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPktMsgst) ProtoMessage() {}

func (x *RedPktMsgst) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPktMsgst.ProtoReflect.Descriptor instead.
func (*RedPktMsgst) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{42}
}

func (x *RedPktMsgst) GetExt() []byte {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *RedPktMsgst) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RedPktMsgst) GetOutBizNo() string {
	if x != nil {
		return x.OutBizNo
	}
	return ""
}

func (x *RedPktMsgst) GetRedpktMsgType() RedPktMsgTypeEnum {
	if x != nil {
		return x.RedpktMsgType
	}
	return RedPktMsgTypeEnum_UNDEFINED8
}

func (x *RedPktMsgst) GetRedpktType() RedPktTypeEnum {
	if x != nil {
		return x.RedpktType
	}
	return RedPktTypeEnum_UNDEFINED9
}

func (x *RedPktMsgst) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RedPktMsgst) GetSenderNickName() string {
	if x != nil {
		return x.SenderNickName
	}
	return ""
}

func (x *RedPktMsgst) GetSenderPicUrl() string {
	if x != nil {
		return x.SenderPicUrl
	}
	return ""
}

func (x *RedPktMsgst) GetRedPktState() RedPktStateEnum {
	if x != nil {
		return x.RedPktState
	}
	return RedPktStateEnum_UNDEFINED10
}

type RedPktNoticeMsgst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ext      []byte `protobuf:"bytes,1,opt,name=ext,proto3" json:"ext,omitempty"`           //扩展字段
	OutBizNo string `protobuf:"bytes,2,opt,name=outBizNo,proto3" json:"outBizNo,omitempty"` //红包id 唯一标识
	NickName string `protobuf:"bytes,3,opt,name=nickName,proto3" json:"nickName,omitempty"` //收红包人的昵称
	PicUrl   string `protobuf:"bytes,4,opt,name=picUrl,proto3" json:"picUrl,omitempty"`     //收红包人的头像
}

func (x *RedPktNoticeMsgst) Reset() {
	*x = RedPktNoticeMsgst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedPktNoticeMsgst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPktNoticeMsgst) ProtoMessage() {}

func (x *RedPktNoticeMsgst) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPktNoticeMsgst.ProtoReflect.Descriptor instead.
func (*RedPktNoticeMsgst) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{43}
}

func (x *RedPktNoticeMsgst) GetExt() []byte {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *RedPktNoticeMsgst) GetOutBizNo() string {
	if x != nil {
		return x.OutBizNo
	}
	return ""
}

func (x *RedPktNoticeMsgst) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *RedPktNoticeMsgst) GetPicUrl() string {
	if x != nil {
		return x.PicUrl
	}
	return ""
}

//***********       其它消息定义     ************//
//客户端回ack消息
type Client2ServerAckMsgSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerMsgId []int64 `protobuf:"varint,1,rep,packed,name=serverMsgId,proto3" json:"serverMsgId,omitempty"` //client向server端回ack,可一次回多条
}

func (x *Client2ServerAckMsgSt) Reset() {
	*x = Client2ServerAckMsgSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client2ServerAckMsgSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client2ServerAckMsgSt) ProtoMessage() {}

func (x *Client2ServerAckMsgSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client2ServerAckMsgSt.ProtoReflect.Descriptor instead.
func (*Client2ServerAckMsgSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{44}
}

func (x *Client2ServerAckMsgSt) GetServerMsgId() []int64 {
	if x != nil {
		return x.ServerMsgId
	}
	return nil
}

//客户端回ack消息
//客户端收到批量群聊消息，ack只需要回复该groupId的最后一个msgid
//客户端收到批量NOTICEPUSH消息，ack只需要回复最后一个msgid
type Client2ServerAckMsgSt2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerMsgId int64       `protobuf:"varint,1,opt,name=serverMsgId,proto3" json:"serverMsgId,omitempty"`
	GroupId     string      `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`                      //群ID
	MsgType     MsgTypeEnum `protobuf:"varint,3,opt,name=msgType,proto3,enum=im.MsgTypeEnum" json:"msgType,omitempty"` //消息类型 只填NOTICEPUSH GROUPCHAT 不填默认走个人的队列
}

func (x *Client2ServerAckMsgSt2) Reset() {
	*x = Client2ServerAckMsgSt2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client2ServerAckMsgSt2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client2ServerAckMsgSt2) ProtoMessage() {}

func (x *Client2ServerAckMsgSt2) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client2ServerAckMsgSt2.ProtoReflect.Descriptor instead.
func (*Client2ServerAckMsgSt2) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{45}
}

func (x *Client2ServerAckMsgSt2) GetServerMsgId() int64 {
	if x != nil {
		return x.ServerMsgId
	}
	return 0
}

func (x *Client2ServerAckMsgSt2) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *Client2ServerAckMsgSt2) GetMsgType() MsgTypeEnum {
	if x != nil {
		return x.MsgType
	}
	return MsgTypeEnum_UNDEFINED
}

//服务端回ack消息,ack带有client消息ID和对应的server端消息ID,server端消息ID在ack结构体外
type Server2ClientAckMsgSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientMsgId    int64              `protobuf:"varint,1,opt,name=clientMsgId,proto3" json:"clientMsgId,omitempty"`             //客户端消息ID
	Code           AckCodeEnum        `protobuf:"varint,2,opt,name=code,proto3,enum=im.AckCodeEnum" json:"code,omitempty"`       //返回状态码
	Des            string             `protobuf:"bytes,3,opt,name=des,proto3" json:"des,omitempty"`                              //当返回错误时，msg会返回最新登陆的客户端的描述信息，可以直接用于客户端的显示
	MsgType        MsgTypeEnum        `protobuf:"varint,4,opt,name=msgType,proto3,enum=im.MsgTypeEnum" json:"msgType,omitempty"` //消息类型
	SenWordRetType SenWordRetTypeEnum `protobuf:"varint,5,opt,name=SenWordRetType,proto3,enum=im.SenWordRetTypeEnum" json:"SenWordRetType,omitempty"`
	SenWordContent string             `protobuf:"bytes,6,opt,name=senWordContent,proto3" json:"senWordContent,omitempty"` //敏感词过滤后的内容
}

func (x *Server2ClientAckMsgSt) Reset() {
	*x = Server2ClientAckMsgSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server2ClientAckMsgSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server2ClientAckMsgSt) ProtoMessage() {}

func (x *Server2ClientAckMsgSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server2ClientAckMsgSt.ProtoReflect.Descriptor instead.
func (*Server2ClientAckMsgSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{46}
}

func (x *Server2ClientAckMsgSt) GetClientMsgId() int64 {
	if x != nil {
		return x.ClientMsgId
	}
	return 0
}

func (x *Server2ClientAckMsgSt) GetCode() AckCodeEnum {
	if x != nil {
		return x.Code
	}
	return AckCodeEnum_UNDEFINED3
}

func (x *Server2ClientAckMsgSt) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

func (x *Server2ClientAckMsgSt) GetMsgType() MsgTypeEnum {
	if x != nil {
		return x.MsgType
	}
	return MsgTypeEnum_UNDEFINED
}

func (x *Server2ClientAckMsgSt) GetSenWordRetType() SenWordRetTypeEnum {
	if x != nil {
		return x.SenWordRetType
	}
	return SenWordRetTypeEnum_UNDEFINED11
}

func (x *Server2ClientAckMsgSt) GetSenWordContent() string {
	if x != nil {
		return x.SenWordContent
	}
	return ""
}

//ios客户端切入后台消息
type ClientSleepMsgSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnReadMsgNum int32 `protobuf:"varint,1,opt,name=unReadMsgNum,proto3" json:"unReadMsgNum,omitempty"` //未读消息数，登录成功后清零
}

func (x *ClientSleepMsgSt) Reset() {
	*x = ClientSleepMsgSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSleepMsgSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSleepMsgSt) ProtoMessage() {}

func (x *ClientSleepMsgSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSleepMsgSt.ProtoReflect.Descriptor instead.
func (*ClientSleepMsgSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{47}
}

func (x *ClientSleepMsgSt) GetUnReadMsgNum() int32 {
	if x != nil {
		return x.UnReadMsgNum
	}
	return 0
}

//踢人消息(即时消息)
type KickoutMsgSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KickType     KickTypeEnum `protobuf:"varint,1,opt,name=kickType,proto3,enum=im.KickTypeEnum" json:"kickType,omitempty"` //同端踢人/服务端强制下线/服务端删除用户/服务端禁用用户/修改密码
	DeviceModel  string       `protobuf:"bytes,2,opt,name=deviceModel,proto3" json:"deviceModel,omitempty"`                 //from终端设备型号,iphoneX/华为P20/小米m6等
	DeviceId     string       `protobuf:"bytes,3,opt,name=deviceId,proto3" json:"deviceId,omitempty"`                       //to终端设备ID
	Des          string       `protobuf:"bytes,4,opt,name=des,proto3" json:"des,omitempty"`                                 //描述
	MillipedeId  string       `protobuf:"bytes,5,opt,name=millipedeId,proto3" json:"millipedeId,omitempty"`                 //服务端使用
	FromDeviceId string       `protobuf:"bytes,6,opt,name=fromDeviceId,proto3" json:"fromDeviceId,omitempty"`               //
}

func (x *KickoutMsgSt) Reset() {
	*x = KickoutMsgSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickoutMsgSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickoutMsgSt) ProtoMessage() {}

func (x *KickoutMsgSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickoutMsgSt.ProtoReflect.Descriptor instead.
func (*KickoutMsgSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{48}
}

func (x *KickoutMsgSt) GetKickType() KickTypeEnum {
	if x != nil {
		return x.KickType
	}
	return KickTypeEnum_UNDEFINED4
}

func (x *KickoutMsgSt) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *KickoutMsgSt) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *KickoutMsgSt) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

func (x *KickoutMsgSt) GetMillipedeId() string {
	if x != nil {
		return x.MillipedeId
	}
	return ""
}

func (x *KickoutMsgSt) GetFromDeviceId() string {
	if x != nil {
		return x.FromDeviceId
	}
	return ""
}

//服务器测试消息
type ServerCmdSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdMsgType int32          `protobuf:"varint,1,opt,name=cmdMsgType,proto3" json:"cmdMsgType,omitempty"`                //消息类型
	Userid     string         `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`                         //用户名
	Device     DeviceTypeEnum `protobuf:"varint,3,opt,name=device,proto3,enum=im.DeviceTypeEnum" json:"device,omitempty"` //终端设备类型,手机/PC等
	Value      int32          `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`                          //
	Others     []string       `protobuf:"bytes,5,rep,name=others,proto3" json:"others,omitempty"`                         //其它参数
}

func (x *ServerCmdSt) Reset() {
	*x = ServerCmdSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerCmdSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerCmdSt) ProtoMessage() {}

func (x *ServerCmdSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerCmdSt.ProtoReflect.Descriptor instead.
func (*ServerCmdSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{49}
}

func (x *ServerCmdSt) GetCmdMsgType() int32 {
	if x != nil {
		return x.CmdMsgType
	}
	return 0
}

func (x *ServerCmdSt) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

func (x *ServerCmdSt) GetDevice() DeviceTypeEnum {
	if x != nil {
		return x.Device
	}
	return DeviceTypeEnum_UNDEFINED13
}

func (x *ServerCmdSt) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ServerCmdSt) GetOthers() []string {
	if x != nil {
		return x.Others
	}
	return nil
}

//登录消息,userID在login结构体外
type LoginMsgSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pwd         string         `protobuf:"bytes,1,opt,name=pwd,proto3" json:"pwd,omitempty"`                               //用户密码
	Ver         string         `protobuf:"bytes,2,opt,name=ver,proto3" json:"ver,omitempty"`                               //sdk版本
	Device      DeviceTypeEnum `protobuf:"varint,3,opt,name=device,proto3,enum=im.DeviceTypeEnum" json:"device,omitempty"` //终端设备类型,手机/PC等
	DeviceModel string         `protobuf:"bytes,4,opt,name=deviceModel,proto3" json:"deviceModel,omitempty"`               //终端设备型号,iphoneX/华为P20/小米m6等
	DeviceId    string         `protobuf:"bytes,5,opt,name=deviceId,proto3" json:"deviceId,omitempty"`                     //终端设备ID 安卓：imei，ios：deviceId, pc:mac
	Auto        bool           `protobuf:"varint,6,opt,name=auto,proto3" json:"auto,omitempty"`                            //是否自动登录,true为自动登录,false为手动登录
	ExtMsg      []byte         `protobuf:"bytes,7,opt,name=extMsg,proto3" json:"extMsg,omitempty"`                         //扩展消息
	IsGuest     bool           `protobuf:"varint,8,opt,name=isGuest,proto3" json:"isGuest,omitempty"`                      //是否是游客  true:游客  false:注册用户
}

func (x *LoginMsgSt) Reset() {
	*x = LoginMsgSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginMsgSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginMsgSt) ProtoMessage() {}

func (x *LoginMsgSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginMsgSt.ProtoReflect.Descriptor instead.
func (*LoginMsgSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{50}
}

func (x *LoginMsgSt) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *LoginMsgSt) GetVer() string {
	if x != nil {
		return x.Ver
	}
	return ""
}

func (x *LoginMsgSt) GetDevice() DeviceTypeEnum {
	if x != nil {
		return x.Device
	}
	return DeviceTypeEnum_UNDEFINED13
}

func (x *LoginMsgSt) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *LoginMsgSt) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *LoginMsgSt) GetAuto() bool {
	if x != nil {
		return x.Auto
	}
	return false
}

func (x *LoginMsgSt) GetExtMsg() []byte {
	if x != nil {
		return x.ExtMsg
	}
	return nil
}

func (x *LoginMsgSt) GetIsGuest() bool {
	if x != nil {
		return x.IsGuest
	}
	return false
}

//群结构改变消息
type GroupChangeMsgSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupMsgType        GroupMsgTypeEnum       `protobuf:"varint,1,opt,name=groupMsgType,proto3,enum=im.GroupMsgTypeEnum" json:"groupMsgType,omitempty"` //群消息类型
	Ext                 []byte                 `protobuf:"bytes,2,opt,name=ext,proto3" json:"ext,omitempty"`                                             //扩展字段
	GroupAddMem         *GroupAddMemSt         `protobuf:"bytes,3,opt,name=groupAddMem,proto3" json:"groupAddMem,omitempty"`                             //邀请入群
	GroupDelMem         *GroupDelMemSt         `protobuf:"bytes,4,opt,name=groupDelMem,proto3" json:"groupDelMem,omitempty"`                             //删除群员
	GroupMemQuit        *GroupMemQuitSt        `protobuf:"bytes,5,opt,name=groupMemQuit,proto3" json:"groupMemQuit,omitempty"`                           //群员退出
	GroupDisMiss        *GroupDismissSt        `protobuf:"bytes,6,opt,name=groupDisMiss,proto3" json:"groupDisMiss,omitempty"`                           //解散群
	GroupChangeOwner    *GroupChangeOwnerSt    `protobuf:"bytes,7,opt,name=groupChangeOwner,proto3" json:"groupChangeOwner,omitempty"`                   //更改群主
	GroupChangeName     *GroupChangeNameSt     `protobuf:"bytes,8,opt,name=groupChangeName,proto3" json:"groupChangeName,omitempty"`                     //更改群名
	GroupChangeDes      *GroupChangeDesSt      `protobuf:"bytes,9,opt,name=groupChangeDes,proto3" json:"groupChangeDes,omitempty"`                       //更改群描述
	GroupChangeMaxUsers *GroupChangeMaxUsersSt `protobuf:"bytes,10,opt,name=groupChangeMaxUsers,proto3" json:"groupChangeMaxUsers,omitempty"`            //更改群成员上限
	GroupChangeAnnounce *GroupChangeAnnounceSt `protobuf:"bytes,11,opt,name=groupChangeAnnounce,proto3" json:"groupChangeAnnounce,omitempty"`            //更改群公告
	GroupDetail         *GroupDetailSt         `protobuf:"bytes,12,opt,name=groupDetail,proto3" json:"groupDetail,omitempty"`                            //群详情
	GroupMembers        *GroupMembersSt        `protobuf:"bytes,13,opt,name=groupMembers,proto3" json:"groupMembers,omitempty"`                          //群成员
	GroupChangeAvatar   *GroupChangeAvatarSt   `protobuf:"bytes,14,opt,name=groupChangeAvatar,proto3" json:"groupChangeAvatar,omitempty"`                //更改群头像
	GroupChangeTop      *GroupChangeTopSt      `protobuf:"bytes,15,opt,name=groupChangeTop,proto3" json:"groupChangeTop,omitempty"`                      //更改群置顶
	GroupChangeDisturb  *GroupChangeDisturbSt  `protobuf:"bytes,16,opt,name=groupChangeDisturb,proto3" json:"groupChangeDisturb,omitempty"`              //更改群免打扰
}

func (x *GroupChangeMsgSt) Reset() {
	*x = GroupChangeMsgSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChangeMsgSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChangeMsgSt) ProtoMessage() {}

func (x *GroupChangeMsgSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChangeMsgSt.ProtoReflect.Descriptor instead.
func (*GroupChangeMsgSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{51}
}

func (x *GroupChangeMsgSt) GetGroupMsgType() GroupMsgTypeEnum {
	if x != nil {
		return x.GroupMsgType
	}
	return GroupMsgTypeEnum_UNDEFINED2
}

func (x *GroupChangeMsgSt) GetExt() []byte {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *GroupChangeMsgSt) GetGroupAddMem() *GroupAddMemSt {
	if x != nil {
		return x.GroupAddMem
	}
	return nil
}

func (x *GroupChangeMsgSt) GetGroupDelMem() *GroupDelMemSt {
	if x != nil {
		return x.GroupDelMem
	}
	return nil
}

func (x *GroupChangeMsgSt) GetGroupMemQuit() *GroupMemQuitSt {
	if x != nil {
		return x.GroupMemQuit
	}
	return nil
}

func (x *GroupChangeMsgSt) GetGroupDisMiss() *GroupDismissSt {
	if x != nil {
		return x.GroupDisMiss
	}
	return nil
}

func (x *GroupChangeMsgSt) GetGroupChangeOwner() *GroupChangeOwnerSt {
	if x != nil {
		return x.GroupChangeOwner
	}
	return nil
}

func (x *GroupChangeMsgSt) GetGroupChangeName() *GroupChangeNameSt {
	if x != nil {
		return x.GroupChangeName
	}
	return nil
}

func (x *GroupChangeMsgSt) GetGroupChangeDes() *GroupChangeDesSt {
	if x != nil {
		return x.GroupChangeDes
	}
	return nil
}

func (x *GroupChangeMsgSt) GetGroupChangeMaxUsers() *GroupChangeMaxUsersSt {
	if x != nil {
		return x.GroupChangeMaxUsers
	}
	return nil
}

func (x *GroupChangeMsgSt) GetGroupChangeAnnounce() *GroupChangeAnnounceSt {
	if x != nil {
		return x.GroupChangeAnnounce
	}
	return nil
}

func (x *GroupChangeMsgSt) GetGroupDetail() *GroupDetailSt {
	if x != nil {
		return x.GroupDetail
	}
	return nil
}

func (x *GroupChangeMsgSt) GetGroupMembers() *GroupMembersSt {
	if x != nil {
		return x.GroupMembers
	}
	return nil
}

func (x *GroupChangeMsgSt) GetGroupChangeAvatar() *GroupChangeAvatarSt {
	if x != nil {
		return x.GroupChangeAvatar
	}
	return nil
}

func (x *GroupChangeMsgSt) GetGroupChangeTop() *GroupChangeTopSt {
	if x != nil {
		return x.GroupChangeTop
	}
	return nil
}

func (x *GroupChangeMsgSt) GetGroupChangeDisturb() *GroupChangeDisturbSt {
	if x != nil {
		return x.GroupChangeDisturb
	}
	return nil
}

//聊天消息
type ChatMsgSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentType     ContentTypeEnum    `protobuf:"varint,1,opt,name=contentType,proto3,enum=im.ContentTypeEnum" json:"contentType,omitempty"` //消息体类型
	Ext             []byte             `protobuf:"bytes,2,opt,name=ext,proto3" json:"ext,omitempty"`                                          //扩展字段
	TxtContent      string             `protobuf:"bytes,3,opt,name=txtContent,proto3" json:"txtContent,omitempty"`                            //文本消息
	ImgContent      *ImgContentSt      `protobuf:"bytes,4,opt,name=imgContent,proto3" json:"imgContent,omitempty"`                            //图片消息
	VoiceContent    *VoiceContentSt    `protobuf:"bytes,5,opt,name=voiceContent,proto3" json:"voiceContent,omitempty"`                        //语音消息
	VideoContent    *VideoContentSt    `protobuf:"bytes,6,opt,name=videoContent,proto3" json:"videoContent,omitempty"`                        //视频消息
	LocationContent *LocationContentSt `protobuf:"bytes,7,opt,name=locationContent,proto3" json:"locationContent,omitempty"`                  //位置消息
	FileContent     *FileContentSt     `protobuf:"bytes,8,opt,name=fileContent,proto3" json:"fileContent,omitempty"`                          //文件消息
	CustomContent   []byte             `protobuf:"bytes,9,opt,name=customContent,proto3" json:"customContent,omitempty"`                      //自定义消息
	RecallContent   *RecallContentSt   `protobuf:"bytes,10,opt,name=recallContent,proto3" json:"recallContent,omitempty"`                     //撤回消息
	ReadedAckMsg    *ReadedContentSt   `protobuf:"bytes,11,opt,name=readedAckMsg,proto3" json:"readedAckMsg,omitempty"`                       //已读消息
	CmdContent      *CmdContentSt      `protobuf:"bytes,12,opt,name=cmdContent,proto3" json:"cmdContent,omitempty"`                           //cmd消息
	AtContent       *AtContentSt       `protobuf:"bytes,13,opt,name=atContent,proto3" json:"atContent,omitempty"`                             //@消息 特殊的文本消息
	BuzContent      *BuzContentSt      `protobuf:"bytes,14,opt,name=buzContent,proto3" json:"buzContent,omitempty"`                           //业务消息
	RedPktMsg       *RedPktMsgst       `protobuf:"bytes,15,opt,name=redPktMsg,proto3" json:"redPktMsg,omitempty"`                             //发红包消息
	RedPktNoticeMsg *RedPktNoticeMsgst `protobuf:"bytes,16,opt,name=redPktNoticeMsg,proto3" json:"redPktNoticeMsg,omitempty"`                 //收红包通知消息
	TxtContentMsg   *TxtContentSt      `protobuf:"bytes,17,opt,name=txtContentMsg,proto3" json:"txtContentMsg,omitempty"`                     //文本消息，带有title
}

func (x *ChatMsgSt) Reset() {
	*x = ChatMsgSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMsgSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMsgSt) ProtoMessage() {}

func (x *ChatMsgSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMsgSt.ProtoReflect.Descriptor instead.
func (*ChatMsgSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{52}
}

func (x *ChatMsgSt) GetContentType() ContentTypeEnum {
	if x != nil {
		return x.ContentType
	}
	return ContentTypeEnum_UNDEFINED1
}

func (x *ChatMsgSt) GetExt() []byte {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *ChatMsgSt) GetTxtContent() string {
	if x != nil {
		return x.TxtContent
	}
	return ""
}

func (x *ChatMsgSt) GetImgContent() *ImgContentSt {
	if x != nil {
		return x.ImgContent
	}
	return nil
}

func (x *ChatMsgSt) GetVoiceContent() *VoiceContentSt {
	if x != nil {
		return x.VoiceContent
	}
	return nil
}

func (x *ChatMsgSt) GetVideoContent() *VideoContentSt {
	if x != nil {
		return x.VideoContent
	}
	return nil
}

func (x *ChatMsgSt) GetLocationContent() *LocationContentSt {
	if x != nil {
		return x.LocationContent
	}
	return nil
}

func (x *ChatMsgSt) GetFileContent() *FileContentSt {
	if x != nil {
		return x.FileContent
	}
	return nil
}

func (x *ChatMsgSt) GetCustomContent() []byte {
	if x != nil {
		return x.CustomContent
	}
	return nil
}

func (x *ChatMsgSt) GetRecallContent() *RecallContentSt {
	if x != nil {
		return x.RecallContent
	}
	return nil
}

func (x *ChatMsgSt) GetReadedAckMsg() *ReadedContentSt {
	if x != nil {
		return x.ReadedAckMsg
	}
	return nil
}

func (x *ChatMsgSt) GetCmdContent() *CmdContentSt {
	if x != nil {
		return x.CmdContent
	}
	return nil
}

func (x *ChatMsgSt) GetAtContent() *AtContentSt {
	if x != nil {
		return x.AtContent
	}
	return nil
}

func (x *ChatMsgSt) GetBuzContent() *BuzContentSt {
	if x != nil {
		return x.BuzContent
	}
	return nil
}

func (x *ChatMsgSt) GetRedPktMsg() *RedPktMsgst {
	if x != nil {
		return x.RedPktMsg
	}
	return nil
}

func (x *ChatMsgSt) GetRedPktNoticeMsg() *RedPktNoticeMsgst {
	if x != nil {
		return x.RedPktNoticeMsg
	}
	return nil
}

func (x *ChatMsgSt) GetTxtContentMsg() *TxtContentSt {
	if x != nil {
		return x.TxtContentMsg
	}
	return nil
}

//client、server、redis、hbase消息发送、存储格式
//client退出登录、心跳包，只发clientMsgId,fromUserId和msgType即可
//server收到client收到的消息后，更改msgid为server端id，添加server端时间戳，
type MsgSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientMsgId    int64                     `protobuf:"varint,1,opt,name=clientMsgId,proto3" json:"clientMsgId,omitempty"`              //client消息ID
	ServerMsgId    int64                     `protobuf:"varint,2,opt,name=serverMsgId,proto3" json:"serverMsgId,omitempty"`              //server端消息ID
	FromId         string                    `protobuf:"bytes,3,opt,name=fromId,proto3" json:"fromId,omitempty"`                         //发送者ID（用户或系统推送）
	ToId           string                    `protobuf:"bytes,4,opt,name=toId,proto3" json:"toId,omitempty"`                             //接收方ID（用户或群）
	ToUserId       string                    `protobuf:"bytes,5,opt,name=toUserId,proto3" json:"toUserId,omitempty"`                     //接收者userID（服务端使用）
	Device         DeviceTypeEnum            `protobuf:"varint,6,opt,name=device,proto3,enum=im.DeviceTypeEnum" json:"device,omitempty"` //终端设备类型,手机/PC等
	MsgType        MsgTypeEnum               `protobuf:"varint,7,opt,name=msgType,proto3,enum=im.MsgTypeEnum" json:"msgType,omitempty"`  //消息类型
	LoginMsg       *LoginMsgSt               `protobuf:"bytes,8,opt,name=loginMsg,proto3" json:"loginMsg,omitempty"`                     //登录消息
	ChatMsg        *ChatMsgSt                `protobuf:"bytes,9,opt,name=chatMsg,proto3" json:"chatMsg,omitempty"`                       //聊天消息内容
	GroupChangeMsg *GroupChangeMsgSt         `protobuf:"bytes,10,opt,name=groupChangeMsg,proto3" json:"groupChangeMsg,omitempty"`        //群结构更改消息
	ClientSleepMsg *ClientSleepMsgSt         `protobuf:"bytes,11,opt,name=clientSleepMsg,proto3" json:"clientSleepMsg,omitempty"`        //client切入后台
	Cli2SerAckMsg  *Client2ServerAckMsgSt    `protobuf:"bytes,12,opt,name=cli2serAckMsg,proto3" json:"cli2serAckMsg,omitempty"`          //client向server发送tcpack
	Ser2CliAckMsg  *Server2ClientAckMsgSt    `protobuf:"bytes,13,opt,name=ser2cliAckMsg,proto3" json:"ser2cliAckMsg,omitempty"`          //server向client发送tcpack
	KickoutMsg     *KickoutMsgSt             `protobuf:"bytes,14,opt,name=kickoutMsg,proto3" json:"kickoutMsg,omitempty"`                //踢人消息
	ServerCmdMsg   *ServerCmdSt              `protobuf:"bytes,15,opt,name=serverCmdMsg,proto3" json:"serverCmdMsg,omitempty"`            //服务器测试消息
	ConfMsg        *ConfMsgSt                `protobuf:"bytes,16,opt,name=confMsg,proto3" json:"confMsg,omitempty"`                      //视频会议消息
	CallMsg        *CallMsgst                `protobuf:"bytes,17,opt,name=callMsg,proto3" json:"callMsg,omitempty"`                      //视频通话消息
	Cli2SerAckMsgs []*Client2ServerAckMsgSt2 `protobuf:"bytes,18,rep,name=cli2serAckMsgs,proto3" json:"cli2serAckMsgs,omitempty"`        //client向server发送tcpack
}

func (x *MsgSt) Reset() {
	*x = MsgSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSt) ProtoMessage() {}

func (x *MsgSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgSt.ProtoReflect.Descriptor instead.
func (*MsgSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{53}
}

func (x *MsgSt) GetClientMsgId() int64 {
	if x != nil {
		return x.ClientMsgId
	}
	return 0
}

func (x *MsgSt) GetServerMsgId() int64 {
	if x != nil {
		return x.ServerMsgId
	}
	return 0
}

func (x *MsgSt) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *MsgSt) GetToId() string {
	if x != nil {
		return x.ToId
	}
	return ""
}

func (x *MsgSt) GetToUserId() string {
	if x != nil {
		return x.ToUserId
	}
	return ""
}

func (x *MsgSt) GetDevice() DeviceTypeEnum {
	if x != nil {
		return x.Device
	}
	return DeviceTypeEnum_UNDEFINED13
}

func (x *MsgSt) GetMsgType() MsgTypeEnum {
	if x != nil {
		return x.MsgType
	}
	return MsgTypeEnum_UNDEFINED
}

func (x *MsgSt) GetLoginMsg() *LoginMsgSt {
	if x != nil {
		return x.LoginMsg
	}
	return nil
}

func (x *MsgSt) GetChatMsg() *ChatMsgSt {
	if x != nil {
		return x.ChatMsg
	}
	return nil
}

func (x *MsgSt) GetGroupChangeMsg() *GroupChangeMsgSt {
	if x != nil {
		return x.GroupChangeMsg
	}
	return nil
}

func (x *MsgSt) GetClientSleepMsg() *ClientSleepMsgSt {
	if x != nil {
		return x.ClientSleepMsg
	}
	return nil
}

func (x *MsgSt) GetCli2SerAckMsg() *Client2ServerAckMsgSt {
	if x != nil {
		return x.Cli2SerAckMsg
	}
	return nil
}

func (x *MsgSt) GetSer2CliAckMsg() *Server2ClientAckMsgSt {
	if x != nil {
		return x.Ser2CliAckMsg
	}
	return nil
}

func (x *MsgSt) GetKickoutMsg() *KickoutMsgSt {
	if x != nil {
		return x.KickoutMsg
	}
	return nil
}

func (x *MsgSt) GetServerCmdMsg() *ServerCmdSt {
	if x != nil {
		return x.ServerCmdMsg
	}
	return nil
}

func (x *MsgSt) GetConfMsg() *ConfMsgSt {
	if x != nil {
		return x.ConfMsg
	}
	return nil
}

func (x *MsgSt) GetCallMsg() *CallMsgst {
	if x != nil {
		return x.CallMsg
	}
	return nil
}

func (x *MsgSt) GetCli2SerAckMsgs() []*Client2ServerAckMsgSt2 {
	if x != nil {
		return x.Cli2SerAckMsgs
	}
	return nil
}

//server端支持消息批量发送
type ServerSendMsgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgContent []*MsgSt    `protobuf:"bytes,1,rep,name=msgContent,proto3" json:"msgContent,omitempty"`                //server端支持消息批量发送
	MsgType    MsgTypeEnum `protobuf:"varint,2,opt,name=msgType,proto3,enum=im.MsgTypeEnum" json:"msgType,omitempty"` //消息类型 只填NOTICEPUSH GROUPCHAT 不填默认走个人的队列
	GroupId    string      `protobuf:"bytes,3,opt,name=groupId,proto3" json:"groupId,omitempty"`
	LastMsgId  int64       `protobuf:"varint,4,opt,name=lastMsgId,proto3" json:"lastMsgId,omitempty"` //最后一条msgId
}

func (x *ServerSendMsgs) Reset() {
	*x = ServerSendMsgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerSendMsgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerSendMsgs) ProtoMessage() {}

func (x *ServerSendMsgs) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerSendMsgs.ProtoReflect.Descriptor instead.
func (*ServerSendMsgs) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{54}
}

func (x *ServerSendMsgs) GetMsgContent() []*MsgSt {
	if x != nil {
		return x.MsgContent
	}
	return nil
}

func (x *ServerSendMsgs) GetMsgType() MsgTypeEnum {
	if x != nil {
		return x.MsgType
	}
	return MsgTypeEnum_UNDEFINED
}

func (x *ServerSendMsgs) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ServerSendMsgs) GetLastMsgId() int64 {
	if x != nil {
		return x.LastMsgId
	}
	return 0
}

//客户端支持消息批量发送
type BatchMsgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgContent []*MsgSt `protobuf:"bytes,1,rep,name=msgContent,proto3" json:"msgContent,omitempty"` //
}

func (x *BatchMsgs) Reset() {
	*x = BatchMsgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchMsgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchMsgs) ProtoMessage() {}

func (x *BatchMsgs) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchMsgs.ProtoReflect.Descriptor instead.
func (*BatchMsgs) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{55}
}

func (x *BatchMsgs) GetMsgContent() []*MsgSt {
	if x != nil {
		return x.MsgContent
	}
	return nil
}

//push接口参数
//MsgTypeEnum 为GROUPCHAT时，groupId需要赋值，
//如果需要群里部分人收消息，toId为该群里需要接收消息的人id
//如果需要群里所有人都收到消息，toId为空
type PushParamSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientMsgId     int64             `protobuf:"varint,1,opt,name=clientMsgId,proto3" json:"clientMsgId,omitempty"`              //client消息ID 只有红包消息用到
	ServerMsgId     int64             `protobuf:"varint,2,opt,name=serverMsgId,proto3" json:"serverMsgId,omitempty"`              //server端消息ID
	FromId          string            `protobuf:"bytes,3,opt,name=fromId,proto3" json:"fromId,omitempty"`                         //消息发送者/操作者
	ToId            []string          `protobuf:"bytes,4,rep,name=toId,proto3" json:"toId,omitempty"`                             //接收方ID（uid）
	GroupId         string            `protobuf:"bytes,5,opt,name=groupId,proto3" json:"groupId,omitempty"`                       //群id
	Device          DeviceTypeEnum    `protobuf:"varint,6,opt,name=device,proto3,enum=im.DeviceTypeEnum" json:"device,omitempty"` //接收方终端类型, 移动端：ANDROID  pc端：WIN
	MsgType         MsgTypeEnum       `protobuf:"varint,7,opt,name=msgType,proto3,enum=im.MsgTypeEnum" json:"msgType,omitempty"`  //消息类型
	ChatMsg         *ChatMsgSt        `protobuf:"bytes,8,opt,name=chatMsg,proto3" json:"chatMsg,omitempty"`                       //聊天消息内容
	KickoutMsg      *KickoutMsgSt     `protobuf:"bytes,9,opt,name=kickoutMsg,proto3" json:"kickoutMsg,omitempty"`                 //踢掉指定在线端,toId只能是uid
	GroupChangeMsg  *GroupChangeMsgSt `protobuf:"bytes,10,opt,name=groupChangeMsg,proto3" json:"groupChangeMsg,omitempty"`        //群结构更改消息
	ConfMsg         *ConfMsgSt        `protobuf:"bytes,11,opt,name=confMsg,proto3" json:"confMsg,omitempty"`                      //视频会议消息
	OffLinePushFlag int32             `protobuf:"varint,12,opt,name=offLinePushFlag,proto3" json:"offLinePushFlag,omitempty"`     //是否给toId离线推送，1推送，2不推送，默认1
	PushToUserScope int32             `protobuf:"varint,13,opt,name=pushToUserScope,proto3" json:"pushToUserScope,omitempty"`     //消息push范围，0:toId，1:fromId和toId，默认0, 只对PRICHAT有效
	CallMsg         *CallMsgst        `protobuf:"bytes,14,opt,name=callMsg,proto3" json:"callMsg,omitempty"`                      //视频通话消息
}

func (x *PushParamSt) Reset() {
	*x = PushParamSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushParamSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushParamSt) ProtoMessage() {}

func (x *PushParamSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushParamSt.ProtoReflect.Descriptor instead.
func (*PushParamSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{56}
}

func (x *PushParamSt) GetClientMsgId() int64 {
	if x != nil {
		return x.ClientMsgId
	}
	return 0
}

func (x *PushParamSt) GetServerMsgId() int64 {
	if x != nil {
		return x.ServerMsgId
	}
	return 0
}

func (x *PushParamSt) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *PushParamSt) GetToId() []string {
	if x != nil {
		return x.ToId
	}
	return nil
}

func (x *PushParamSt) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *PushParamSt) GetDevice() DeviceTypeEnum {
	if x != nil {
		return x.Device
	}
	return DeviceTypeEnum_UNDEFINED13
}

func (x *PushParamSt) GetMsgType() MsgTypeEnum {
	if x != nil {
		return x.MsgType
	}
	return MsgTypeEnum_UNDEFINED
}

func (x *PushParamSt) GetChatMsg() *ChatMsgSt {
	if x != nil {
		return x.ChatMsg
	}
	return nil
}

func (x *PushParamSt) GetKickoutMsg() *KickoutMsgSt {
	if x != nil {
		return x.KickoutMsg
	}
	return nil
}

func (x *PushParamSt) GetGroupChangeMsg() *GroupChangeMsgSt {
	if x != nil {
		return x.GroupChangeMsg
	}
	return nil
}

func (x *PushParamSt) GetConfMsg() *ConfMsgSt {
	if x != nil {
		return x.ConfMsg
	}
	return nil
}

func (x *PushParamSt) GetOffLinePushFlag() int32 {
	if x != nil {
		return x.OffLinePushFlag
	}
	return 0
}

func (x *PushParamSt) GetPushToUserScope() int32 {
	if x != nil {
		return x.PushToUserScope
	}
	return 0
}

func (x *PushParamSt) GetCallMsg() *CallMsgst {
	if x != nil {
		return x.CallMsg
	}
	return nil
}

//offline push
type OfflinePushParamSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerMsgId int64         `protobuf:"varint,1,opt,name=serverMsgId,proto3" json:"serverMsgId,omitempty"`                   //server端消息ID
	FromId      string        `protobuf:"bytes,2,opt,name=fromId,proto3" json:"fromId,omitempty"`                              //消息发送者/操作者  客户端跳转页面用
	ToId        string        `protobuf:"bytes,3,opt,name=toId,proto3" json:"toId,omitempty"`                                  //接收ID(用户或群)   客户端跳转页面用
	MsgType     MsgTypeEnum   `protobuf:"varint,4,opt,name=msgType,proto3,enum=im.MsgTypeEnum" json:"msgType,omitempty"`       //消息体类型        客户端跳转页面用
	Ext         []byte        `protobuf:"bytes,5,opt,name=ext,proto3" json:"ext,omitempty"`                                    //扩展字段          客户端跳转页面用 目前对应ChatMsgSt的ext
	PushToken   string        `protobuf:"bytes,6,opt,name=pushToken,proto3" json:"pushToken,omitempty"`                        //接收消息的token或id，接收者的唯一标识
	PhoneType   PhoneTypeEnum `protobuf:"varint,7,opt,name=phoneType,proto3,enum=im.PhoneTypeEnum" json:"phoneType,omitempty"` //手机类型
	Content     string        `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`                            //推送内容
	UnReadNum   int32         `protobuf:"varint,9,opt,name=unReadNum,proto3" json:"unReadNum,omitempty"`                       //未读数
	AppKey      string        `protobuf:"bytes,10,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
	PackageName string        `protobuf:"bytes,11,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"` //安卓：应用包名，ios：bundle_id
	Title       string        `protobuf:"bytes,12,opt,name=title,proto3" json:"title,omitempty"`                                //推送title
	Ext1        []byte        `protobuf:"bytes,13,opt,name=ext1,proto3" json:"ext1,omitempty"`                                  //扩展字段1          客户端跳转页面用  目前对应ConfMsgSt
}

func (x *OfflinePushParamSt) Reset() {
	*x = OfflinePushParamSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflinePushParamSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflinePushParamSt) ProtoMessage() {}

func (x *OfflinePushParamSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflinePushParamSt.ProtoReflect.Descriptor instead.
func (*OfflinePushParamSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{57}
}

func (x *OfflinePushParamSt) GetServerMsgId() int64 {
	if x != nil {
		return x.ServerMsgId
	}
	return 0
}

func (x *OfflinePushParamSt) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *OfflinePushParamSt) GetToId() string {
	if x != nil {
		return x.ToId
	}
	return ""
}

func (x *OfflinePushParamSt) GetMsgType() MsgTypeEnum {
	if x != nil {
		return x.MsgType
	}
	return MsgTypeEnum_UNDEFINED
}

func (x *OfflinePushParamSt) GetExt() []byte {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *OfflinePushParamSt) GetPushToken() string {
	if x != nil {
		return x.PushToken
	}
	return ""
}

func (x *OfflinePushParamSt) GetPhoneType() PhoneTypeEnum {
	if x != nil {
		return x.PhoneType
	}
	return PhoneTypeEnum_UNDEFINED14
}

func (x *OfflinePushParamSt) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *OfflinePushParamSt) GetUnReadNum() int32 {
	if x != nil {
		return x.UnReadNum
	}
	return 0
}

func (x *OfflinePushParamSt) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *OfflinePushParamSt) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *OfflinePushParamSt) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *OfflinePushParamSt) GetExt1() []byte {
	if x != nil {
		return x.Ext1
	}
	return nil
}

//指定appkey的移动端登录用户或游客的消息推送  NOTICEPUSH
type AppkeyPushSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerMsgId     int64      `protobuf:"varint,1,opt,name=serverMsgId,proto3" json:"serverMsgId,omitempty"`         //server端消息ID
	IsSend          bool       `protobuf:"varint,2,opt,name=isSend,proto3" json:"isSend,omitempty"`                   //发送or撤回消息
	FromId          string     `protobuf:"bytes,3,opt,name=fromId,proto3" json:"fromId,omitempty"`                    //消息发送者
	Appkey          string     `protobuf:"bytes,4,opt,name=appkey,proto3" json:"appkey,omitempty"`                    //指定appkey
	PushToUserScope int32      `protobuf:"varint,5,opt,name=pushToUserScope,proto3" json:"pushToUserScope,omitempty"` //消息push范围，0:all，1:登录用户，2:游客，默认0
	Ttl             int32      `protobuf:"varint,6,opt,name=ttl,proto3" json:"ttl,omitempty"`                         //消息保存时间，单位秒，如果是0则为即时消息
	ChatMsg         *ChatMsgSt `protobuf:"bytes,7,opt,name=chatMsg,proto3" json:"chatMsg,omitempty"`                  //消息内容
}

func (x *AppkeyPushSt) Reset() {
	*x = AppkeyPushSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppkeyPushSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppkeyPushSt) ProtoMessage() {}

func (x *AppkeyPushSt) ProtoReflect() protoreflect.Message {
	mi := &file_im_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppkeyPushSt.ProtoReflect.Descriptor instead.
func (*AppkeyPushSt) Descriptor() ([]byte, []int) {
	return file_im_proto_rawDescGZIP(), []int{58}
}

func (x *AppkeyPushSt) GetServerMsgId() int64 {
	if x != nil {
		return x.ServerMsgId
	}
	return 0
}

func (x *AppkeyPushSt) GetIsSend() bool {
	if x != nil {
		return x.IsSend
	}
	return false
}

func (x *AppkeyPushSt) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *AppkeyPushSt) GetAppkey() string {
	if x != nil {
		return x.Appkey
	}
	return ""
}

func (x *AppkeyPushSt) GetPushToUserScope() int32 {
	if x != nil {
		return x.PushToUserScope
	}
	return 0
}

func (x *AppkeyPushSt) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *AppkeyPushSt) GetChatMsg() *ChatMsgSt {
	if x != nil {
		return x.ChatMsg
	}
	return nil
}

var File_im_proto protoreflect.FileDescriptor

var file_im_proto_rawDesc = []byte{
	0x0a, 0x08, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x69, 0x6d, 0x22, 0x23,
	0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x4f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x4f, 0x75, 0x74, 0x22, 0xea, 0x03, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x53, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x73, 0x74, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x73, 0x74, 0x61,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x69, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x70, 0x65, 0x64, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x70, 0x65, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x69, 0x6d, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x75, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x32, 0x0a, 0x0a,
	0x70, 0x75, 0x73, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x69, 0x6d, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x50, 0x75, 0x73, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x75, 0x73, 0x68, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79,
	0x22, 0x3e, 0x0a, 0x0c, 0x54, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x22, 0x80, 0x02, 0x0a, 0x0c, 0x49, 0x6d, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6d, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6d, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6d, 0x67,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x61, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x61, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x5f, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x73,
	0x22, 0x33, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x26, 0x0a, 0x0c, 0x43, 0x6d,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x0b, 0x41, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x41,
	0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0x88, 0x02, 0x0a, 0x0c, 0x42, 0x75, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x63, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x63, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x75,
	0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x75, 0x72, 0x6c, 0x12, 0x24,
	0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x03, 0x0a, 0x0d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0x42,
	0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x53, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x6f, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x4d, 0x65,
	0x6d, 0x53, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x55, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x64, 0x64, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x59, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x4d,
	0x65, 0x6d, 0x53, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x6c, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65,
	0x6c, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x66,
	0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x51, 0x75, 0x69, 0x74, 0x53, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x74, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x71, 0x75, 0x69, 0x74, 0x55, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65,
	0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6e, 0x65, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44,
	0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x53, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x10, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x53, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x54, 0x6f, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x14, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x53, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44,
	0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x22, 0x5c, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x73, 0x53, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x65, 0x77, 0x44, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x77,
	0x44, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x70, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x15, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x6b, 0x0a, 0x15, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x65, 0x77, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x58, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x01, 0x0a, 0x0f, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69,
	0x6d, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x12, 0x2c, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x65, 0x78, 0x74,
	0x12, 0x39, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x0b, 0x43,
	0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x0c, 0x43, 0x61,
	0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x65,
	0x72, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c,
	0x69, 0x64, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x75, 0x72, 0x6e, 0x55,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x75, 0x72, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x75, 0x72, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x75, 0x72, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x75, 0x72,
	0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x95, 0x02, 0x0a, 0x0c, 0x43, 0x61,
	0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6d,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6d,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x52, 0x6f,
	0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69,
	0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08,
	0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x52, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x22, 0x24, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x6c,
	0x6c, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x53, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x26, 0x0a,
	0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x32, 0x53, 0x65, 0x72,
	0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x53,
	0x65, 0x72, 0x32, 0x43, 0x6c, 0x69, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x12, 0x2c,
	0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x97, 0x04, 0x0a,
	0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x73, 0x4d, 0x73, 0x67, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x65,
	0x78, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x32, 0x73, 0x65, 0x72, 0x41, 0x63, 0x6b,
	0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x2e, 0x43,
	0x6c, 0x69, 0x32, 0x53, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x32, 0x73, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x12, 0x30, 0x0a,
	0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x53,
	0x74, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x08, 0x63,
	0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x69, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x52, 0x08, 0x63,
	0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6d,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x53, 0x74, 0x52, 0x0a, 0x63,
	0x61, 0x6c, 0x6c, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x69, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x52,
	0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x32, 0x63, 0x6c, 0x69, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x32, 0x43, 0x6c, 0x69, 0x41,
	0x63, 0x6b, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x32, 0x63, 0x6c, 0x69,
	0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x22, 0x8c, 0x03, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x6c, 0x4d,
	0x73, 0x67, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x43, 0x61, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6d, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x52, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xdd, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x64, 0x50, 0x6b, 0x74,
	0x4d, 0x73, 0x67, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x75, 0x74, 0x42, 0x69, 0x7a, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x75, 0x74, 0x42, 0x69, 0x7a, 0x4e, 0x6f, 0x12, 0x3b, 0x0a, 0x0d, 0x72, 0x65, 0x64,
	0x70, 0x6b, 0x74, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x70, 0x6b, 0x74, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x65, 0x64, 0x70, 0x6b, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x69, 0x6d, 0x2e,
	0x52, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a,
	0x72, 0x65, 0x64, 0x70, 0x6b, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x50, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x35,
	0x0a, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x6b, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x75, 0x0a, 0x11, 0x52, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x75, 0x74, 0x42, 0x69, 0x7a, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x75, 0x74, 0x42, 0x69, 0x7a, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x22, 0x39, 0x0a, 0x15,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x32, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x6b,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x32, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x32, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x69, 0x6d, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x15, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69, 0x6d, 0x2e, 0x41, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x6d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69,
	0x6d, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x6d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x57, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x69, 0x6d, 0x2e, 0x53, 0x65, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0e, 0x53, 0x65, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x57, 0x6f, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x65, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x36,
	0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x4e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x6e, 0x52, 0x65, 0x61, 0x64,
	0x4d, 0x73, 0x67, 0x4e, 0x75, 0x6d, 0x22, 0xd2, 0x01, 0x0a, 0x0c, 0x4b, 0x69, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x6b, 0x69, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x4b,
	0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x6b, 0x69, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x64, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x70, 0x65,
	0x64, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6c, 0x6c,
	0x69, 0x70, 0x65, 0x64, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x72, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x53, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6d, 0x64, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x6d, 0x64, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x69, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x22, 0xe0, 0x01,
	0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x77, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x77, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x69, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x78, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x65, 0x78, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x47, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xd1, 0x07, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x6d,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x65, 0x78,
	0x74, 0x12, 0x33, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x12, 0x33, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44,
	0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6d,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x52, 0x0b,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x12, 0x36, 0x0a, 0x0c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x51, 0x75, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x51,
	0x75, 0x69, 0x74, 0x53, 0x74, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x51,
	0x75, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x4d,
	0x69, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6d, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x53, 0x74, 0x52, 0x0c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x52, 0x10, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x3f, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x52,
	0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x73, 0x53, 0x74, 0x52, 0x0e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x73, 0x12, 0x4b,
	0x0a, 0x13, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x53, 0x74, 0x52, 0x13, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x52, 0x13, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x69, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74,
	0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x36, 0x0a,
	0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x53, 0x74, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x69, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x74, 0x52, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x3c, 0x0a, 0x0e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x53, 0x74, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x12, 0x48, 0x0a, 0x12, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x53, 0x74,
	0x52, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x73,
	0x74, 0x75, 0x72, 0x62, 0x22, 0xe1, 0x06, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x69,
	0x6d, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x49, 0x6d, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x52, 0x0a, 0x69, 0x6d, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6d, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6d,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x52,
	0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a,
	0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x52, 0x0f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x72, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x65, 0x64, 0x41, 0x63,
	0x6b, 0x4d, 0x73, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6d, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x52,
	0x0c, 0x72, 0x65, 0x61, 0x64, 0x65, 0x64, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x12, 0x30, 0x0a,
	0x0a, 0x63, 0x6d, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x6d, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x52, 0x0a, 0x63, 0x6d, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x09, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6d, 0x2e, 0x41, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x52, 0x09, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x0a, 0x62, 0x75, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x42, 0x75, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x52, 0x0a, 0x62, 0x75, 0x7a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x2d, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x4d,
	0x73, 0x67, 0x73, 0x74, 0x52, 0x09, 0x72, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x3f, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4d,
	0x73, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x2e, 0x52, 0x65,
	0x64, 0x50, 0x6b, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x73, 0x74, 0x52,
	0x0f, 0x72, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4d, 0x73, 0x67,
	0x12, 0x36, 0x0a, 0x0d, 0x74, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x73,
	0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6d, 0x2e, 0x54, 0x78, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x52, 0x0d, 0x74, 0x78, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x22, 0xba, 0x06, 0x0a, 0x05, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x69, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69, 0x6d,
	0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x6d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x73,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x6d, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x73,
	0x67, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x52, 0x07, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x0e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4d, 0x73, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x65, 0x65,
	0x70, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x6c,
	0x65, 0x65, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x32, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x69, 0x6d, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x32, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x32, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x32, 0x63,
	0x6c, 0x69, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x69, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x32, 0x63,
	0x6c, 0x69, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x0a, 0x6b, 0x69, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69,
	0x6d, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x52, 0x0a,
	0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x33, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x4d, 0x73, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x69, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x53,
	0x74, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x4d, 0x73, 0x67, 0x12,
	0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x4d, 0x73, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x66, 0x4d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c,
	0x4d, 0x73, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6d, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x73, 0x74, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x73,
	0x67, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x32, 0x73, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x4d,
	0x73, 0x67, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6d, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x32, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x32, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x32, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x6b, 0x4d, 0x73, 0x67, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x69,
	0x6d, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69, 0x6d, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x73, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x69, 0x6d, 0x2e, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xad,
	0x04, 0x0a, 0x0b, 0x50, 0x75, 0x73, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x69, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69, 0x6d, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x0a, 0x6b, 0x69, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69,
	0x6d, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x52, 0x0a,
	0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x0e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66,
	0x4d, 0x73, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6d, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x4d, 0x73,
	0x67, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x4c,
	0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x75, 0x73, 0x68, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x73, 0x67,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x4d, 0x73, 0x67, 0x73, 0x74, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x22, 0x8c,
	0x03, 0x0a, 0x12, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x53, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x6f, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69, 0x6d, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x65, 0x78, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2f,
	0x0a, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x69, 0x6d, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x52,
	0x65, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e,
	0x52, 0x65, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x74,
	0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x65, 0x78, 0x74, 0x31, 0x22, 0xdd, 0x01,
	0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6b, 0x65, 0x79, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x70, 0x70, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x73, 0x68,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x74, 0x74, 0x6c, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x52, 0x07, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x2a, 0xc2, 0x02,
	0x0a, 0x0b, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x47, 0x4f, 0x55,
	0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x52, 0x49, 0x43, 0x48, 0x41, 0x54, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x43, 0x48, 0x41, 0x54, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x45, 0x41, 0x52,
	0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x57, 0x4d,
	0x53, 0x47, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x49, 0x43, 0x4b, 0x4f, 0x55, 0x54, 0x10,
	0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x49, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10,
	0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x54, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x45,
	0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0d, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x43, 0x4d, 0x44, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x4f, 0x4e, 0x46, 0x4d, 0x53, 0x47, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x43, 0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x11, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x46, 0x4d, 0x53, 0x47, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54,
	0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x50, 0x55, 0x53, 0x48,
	0x10, 0x13, 0x2a, 0xdb, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x31, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x58, 0x54, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x49, 0x4d, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x4f, 0x49, 0x43,
	0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x49, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x08, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x45, 0x41, 0x44, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4d,
	0x44, 0x43, 0x4f, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x54, 0x43, 0x4f, 0x4e,
	0x54, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x55, 0x5a, 0x43, 0x4f, 0x4e, 0x54, 0x10, 0x0c,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x44, 0x50, 0x4b, 0x54, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x45, 0x44, 0x50, 0x4b, 0x54, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x0e, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x58, 0x54, 0x57, 0x49, 0x54, 0x48, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x0f,
	0x2a, 0xeb, 0x01, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x32, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x44, 0x5f, 0x4d, 0x45, 0x4d,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x5f, 0x4d, 0x45, 0x4d, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x4d, 0x45, 0x4d, 0x5f, 0x51, 0x55, 0x49, 0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x49, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x10, 0x07, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x55, 0x53, 0x45, 0x52, 0x53,
	0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x4e, 0x4e,
	0x4f, 0x55, 0x4e, 0x43, 0x45, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x10, 0x0c, 0x2a, 0xa4,
	0x01, 0x0a, 0x0b, 0x41, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0e,
	0x0a, 0x0a, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x33, 0x10, 0x00, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x4f,
	0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x53, 0x53,
	0x57, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4f, 0x52,
	0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x45, 0x52, 0x52, 0x10,
	0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x53, 0x47, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4c,
	0x41, 0x43, 0x4b, 0x10, 0x08, 0x2a, 0x74, 0x0a, 0x0c, 0x4b, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x34, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x41, 0x4d, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x52, 0x56, 0x4b,
	0x49, 0x43, 0x4b, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x52, 0x56, 0x44,
	0x45, 0x4c, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x52, 0x56, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x55, 0x53, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x50, 0x57, 0x44, 0x10, 0x05, 0x2a, 0x6e, 0x0a, 0x0e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x31, 0x33, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x49,
	0x4f, 0x53, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x07, 0x0a,
	0x03, 0x4d, 0x41, 0x43, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x05, 0x12,
	0x06, 0x0a, 0x02, 0x50, 0x43, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x48, 0x4f, 0x4e, 0x45,
	0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x42, 0x10, 0x08, 0x2a, 0x63, 0x0a, 0x0d, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x31, 0x34, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x55, 0x41,
	0x57, 0x45, 0x49, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x45, 0x49, 0x5a, 0x55, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x58, 0x49, 0x41, 0x4f, 0x4d, 0x49, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04,
	0x56, 0x49, 0x56, 0x4f, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x50, 0x4f, 0x10, 0x06,
	0x2a, 0x64, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x31, 0x35, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46,
	0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x51, 0x55, 0x49, 0x54, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41, 0x43, 0x4b, 0x53,
	0x54, 0x41, 0x47, 0x45, 0x10, 0x05, 0x2a, 0x44, 0x0a, 0x0e, 0x50, 0x75, 0x73, 0x68, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x31, 0x36, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x46,
	0x46, 0x5f, 0x41, 0x54, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x2a, 0x5e, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x0a,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x35, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x43, 0x45,
	0x50, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x48, 0x41, 0x4e, 0x47, 0x55,
	0x50, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4d, 0x44, 0x10, 0x05, 0x2a, 0xe2, 0x01, 0x0a,
	0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a,
	0x0a, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x36, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x31, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x41,
	0x4e, 0x47, 0x55, 0x50, 0x31, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x31, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x31, 0x10,
	0x04, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x31, 0x10, 0x05, 0x12, 0x09,
	0x0a, 0x05, 0x42, 0x55, 0x53, 0x59, 0x31, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x4e, 0x53,
	0x57, 0x45, 0x52, 0x4f, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x44, 0x45, 0x56, 0x31, 0x10, 0x07,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x31, 0x10, 0x08, 0x12, 0x09, 0x0a,
	0x05, 0x4a, 0x4f, 0x49, 0x4e, 0x31, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4a, 0x4f,
	0x49, 0x4e, 0x31, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x41, 0x54, 0x41, 0x31, 0x10, 0x0b,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x31, 0x10, 0x0c, 0x12, 0x08, 0x0a,
	0x04, 0x41, 0x43, 0x4b, 0x31, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4d, 0x44, 0x31, 0x10,
	0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x31, 0x10,
	0x0f, 0x2a, 0x49, 0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x37, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4e, 0x45, 0x56, 0x53, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x45, 0x56, 0x53, 0x4e, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x37, 0x0a, 0x11,
	0x52, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x38, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4f,
	0x50, 0x45, 0x4e, 0x10, 0x02, 0x2a, 0x46, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x39, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x52, 0x44, 0x49, 0x4e,
	0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x03, 0x2a, 0x59, 0x0a,
	0x0f, 0x52, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x31, 0x30, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x49, 0x54, 0x50, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x61, 0x79, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x41,
	0x4b, 0x45, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x04, 0x2a, 0x47, 0x0a, 0x10, 0x52, 0x65, 0x64, 0x50,
	0x6b, 0x74, 0x54, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x31, 0x32, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x45, 0x44, 0x50, 0x4b, 0x54, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x44, 0x50, 0x4b, 0x54, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x02, 0x2a, 0x64, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x31, 0x31, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x53, 0x55, 0x43, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x4e, 0x45,
	0x45, 0x44, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x45, 0x52, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x53, 0x55, 0x43, 0x10, 0x04, 0x32, 0x31, 0x0a, 0x02, 0x49, 0x4d, 0x12, 0x2b, 0x0a,
	0x07, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x09, 0x2e, 0x69, 0x6d, 0x2e, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x1a, 0x13, 0x2e, 0x69, 0x6d, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_im_proto_rawDescOnce sync.Once
	file_im_proto_rawDescData = file_im_proto_rawDesc
)

func file_im_proto_rawDescGZIP() []byte {
	file_im_proto_rawDescOnce.Do(func() {
		file_im_proto_rawDescData = protoimpl.X.CompressGZIP(file_im_proto_rawDescData)
	})
	return file_im_proto_rawDescData
}

var file_im_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_im_proto_msgTypes = make([]protoimpl.MessageInfo, 59)
var file_im_proto_goTypes = []interface{}{
	(MsgTypeEnum)(0),               // 0: im.MsgTypeEnum
	(ContentTypeEnum)(0),           // 1: im.ContentTypeEnum
	(GroupMsgTypeEnum)(0),          // 2: im.GroupMsgTypeEnum
	(AckCodeEnum)(0),               // 3: im.AckCodeEnum
	(KickTypeEnum)(0),              // 4: im.KickTypeEnum
	(DeviceTypeEnum)(0),            // 5: im.DeviceTypeEnum
	(PhoneTypeEnum)(0),             // 6: im.PhoneTypeEnum
	(UserStatEnum)(0),              // 7: im.UserStatEnum
	(PushSwitchEnum)(0),            // 8: im.PushSwitchEnum
	(ConfTypeEnum)(0),              // 9: im.ConfTypeEnum
	(CallTypeEnum)(0),              // 10: im.CallTypeEnum
	(RoomTypeEnum)(0),              // 11: im.RoomTypeEnum
	(RedPktMsgTypeEnum)(0),         // 12: im.RedPktMsgTypeEnum
	(RedPktTypeEnum)(0),            // 13: im.RedPktTypeEnum
	(RedPktStateEnum)(0),           // 14: im.RedPktStateEnum
	(RedPktToTypeEnum)(0),          // 15: im.RedPktToTypeEnum
	(SenWordRetTypeEnum)(0),        // 16: im.SenWordRetTypeEnum
	(*ForwardResponse)(nil),        // 17: im.ForwardResponse
	(*UserRedisSt)(nil),            // 18: im.UserRedisSt
	(*TxtContentSt)(nil),           // 19: im.TxtContentSt
	(*ImgContentSt)(nil),           // 20: im.ImgContentSt
	(*VoiceContentSt)(nil),         // 21: im.VoiceContentSt
	(*VideoContentSt)(nil),         // 22: im.VideoContentSt
	(*FileContentSt)(nil),          // 23: im.FileContentSt
	(*LocationContentSt)(nil),      // 24: im.LocationContentSt
	(*RecallContentSt)(nil),        // 25: im.RecallContentSt
	(*ReadedContentSt)(nil),        // 26: im.ReadedContentSt
	(*CmdContentSt)(nil),           // 27: im.CmdContentSt
	(*AtContentSt)(nil),            // 28: im.AtContentSt
	(*BuzContentSt)(nil),           // 29: im.BuzContentSt
	(*GroupDetailSt)(nil),          // 30: im.GroupDetailSt
	(*GroupMembersSt)(nil),         // 31: im.GroupMembersSt
	(*GroupAddMemSt)(nil),          // 32: im.GroupAddMemSt
	(*GroupDelMemSt)(nil),          // 33: im.GroupDelMemSt
	(*GroupMemQuitSt)(nil),         // 34: im.GroupMemQuitSt
	(*GroupDismissSt)(nil),         // 35: im.GroupDismissSt
	(*GroupChangeOwnerSt)(nil),     // 36: im.GroupChangeOwnerSt
	(*GroupChangeNameSt)(nil),      // 37: im.GroupChangeNameSt
	(*GroupChangeAvatarSt)(nil),    // 38: im.GroupChangeAvatarSt
	(*GroupChangeTopSt)(nil),       // 39: im.GroupChangeTopSt
	(*GroupChangeDisturbSt)(nil),   // 40: im.GroupChangeDisturbSt
	(*GroupChangeDesSt)(nil),       // 41: im.GroupChangeDesSt
	(*GroupChangeAnnounceSt)(nil),  // 42: im.GroupChangeAnnounceSt
	(*GroupChangeMaxUsersSt)(nil),  // 43: im.GroupChangeMaxUsersSt
	(*ConfUserInfo)(nil),           // 44: im.ConfUserInfo
	(*CommonContentSt)(nil),        // 45: im.CommonContentSt
	(*ConfMsgSt)(nil),              // 46: im.ConfMsgSt
	(*ChatSession)(nil),            // 47: im.ChatSession
	(*CallUserInfo)(nil),           // 48: im.CallUserInfo
	(*CallServerSt)(nil),           // 49: im.CallServerSt
	(*CallCreateSt)(nil),           // 50: im.CallCreateSt
	(*CallJoinSt)(nil),             // 51: im.CallJoinSt
	(*CallDataSt)(nil),             // 52: im.CallDataSt
	(*CallAnswerSt)(nil),           // 53: im.CallAnswerSt
	(*CallRejoinSt)(nil),           // 54: im.CallRejoinSt
	(*Cli2SerAckMsgSt)(nil),        // 55: im.Cli2SerAckMsgSt
	(*Ser2CliAckMsgSt)(nil),        // 56: im.Ser2CliAckMsgSt
	(*CallWsMsgst)(nil),            // 57: im.CallWsMsgst
	(*CallMsgst)(nil),              // 58: im.CallMsgst
	(*RedPktMsgst)(nil),            // 59: im.RedPktMsgst
	(*RedPktNoticeMsgst)(nil),      // 60: im.RedPktNoticeMsgst
	(*Client2ServerAckMsgSt)(nil),  // 61: im.Client2ServerAckMsgSt
	(*Client2ServerAckMsgSt2)(nil), // 62: im.Client2ServerAckMsgSt2
	(*Server2ClientAckMsgSt)(nil),  // 63: im.Server2ClientAckMsgSt
	(*ClientSleepMsgSt)(nil),       // 64: im.ClientSleepMsgSt
	(*KickoutMsgSt)(nil),           // 65: im.KickoutMsgSt
	(*ServerCmdSt)(nil),            // 66: im.ServerCmdSt
	(*LoginMsgSt)(nil),             // 67: im.LoginMsgSt
	(*GroupChangeMsgSt)(nil),       // 68: im.GroupChangeMsgSt
	(*ChatMsgSt)(nil),              // 69: im.ChatMsgSt
	(*MsgSt)(nil),                  // 70: im.MsgSt
	(*ServerSendMsgs)(nil),         // 71: im.ServerSendMsgs
	(*BatchMsgs)(nil),              // 72: im.BatchMsgs
	(*PushParamSt)(nil),            // 73: im.PushParamSt
	(*OfflinePushParamSt)(nil),     // 74: im.OfflinePushParamSt
	(*AppkeyPushSt)(nil),           // 75: im.AppkeyPushSt
}
var file_im_proto_depIdxs = []int32{
	7,  // 0: im.UserRedisSt.userstat:type_name -> im.UserStatEnum
	5,  // 1: im.UserRedisSt.deviceType:type_name -> im.DeviceTypeEnum
	6,  // 2: im.UserRedisSt.phoneType:type_name -> im.PhoneTypeEnum
	8,  // 3: im.UserRedisSt.pushSwitch:type_name -> im.PushSwitchEnum
	44, // 4: im.CommonContentSt.userList:type_name -> im.ConfUserInfo
	44, // 5: im.CommonContentSt.creater:type_name -> im.ConfUserInfo
	47, // 6: im.CommonContentSt.session:type_name -> im.ChatSession
	9,  // 7: im.ConfMsgSt.confType:type_name -> im.ConfTypeEnum
	45, // 8: im.ConfMsgSt.commonContent:type_name -> im.CommonContentSt
	48, // 9: im.CallCreateSt.creater:type_name -> im.CallUserInfo
	48, // 10: im.CallCreateSt.inviterList:type_name -> im.CallUserInfo
	11, // 11: im.CallCreateSt.RoomType:type_name -> im.RoomTypeEnum
	47, // 12: im.CallCreateSt.session:type_name -> im.ChatSession
	49, // 13: im.CallCreateSt.CallServer:type_name -> im.CallServerSt
	10, // 14: im.Ser2CliAckMsgSt.CallType:type_name -> im.CallTypeEnum
	10, // 15: im.CallWsMsgst.callType:type_name -> im.CallTypeEnum
	55, // 16: im.CallWsMsgst.cli2serAckMsg:type_name -> im.Cli2SerAckMsgSt
	50, // 17: im.CallWsMsgst.callCreate:type_name -> im.CallCreateSt
	51, // 18: im.CallWsMsgst.callJoin:type_name -> im.CallJoinSt
	52, // 19: im.CallWsMsgst.callData:type_name -> im.CallDataSt
	53, // 20: im.CallWsMsgst.callAnswer:type_name -> im.CallAnswerSt
	54, // 21: im.CallWsMsgst.callRejoin:type_name -> im.CallRejoinSt
	56, // 22: im.CallWsMsgst.ser2cliAckMsg:type_name -> im.Ser2CliAckMsgSt
	10, // 23: im.CallMsgst.CallType:type_name -> im.CallTypeEnum
	48, // 24: im.CallMsgst.creater:type_name -> im.CallUserInfo
	48, // 25: im.CallMsgst.inviterList:type_name -> im.CallUserInfo
	11, // 26: im.CallMsgst.RoomType:type_name -> im.RoomTypeEnum
	47, // 27: im.CallMsgst.session:type_name -> im.ChatSession
	49, // 28: im.CallMsgst.CallServer:type_name -> im.CallServerSt
	12, // 29: im.RedPktMsgst.redpktMsgType:type_name -> im.RedPktMsgTypeEnum
	13, // 30: im.RedPktMsgst.redpktType:type_name -> im.RedPktTypeEnum
	14, // 31: im.RedPktMsgst.redPktState:type_name -> im.RedPktStateEnum
	0,  // 32: im.Client2ServerAckMsgSt2.msgType:type_name -> im.MsgTypeEnum
	3,  // 33: im.Server2ClientAckMsgSt.code:type_name -> im.AckCodeEnum
	0,  // 34: im.Server2ClientAckMsgSt.msgType:type_name -> im.MsgTypeEnum
	16, // 35: im.Server2ClientAckMsgSt.SenWordRetType:type_name -> im.SenWordRetTypeEnum
	4,  // 36: im.KickoutMsgSt.kickType:type_name -> im.KickTypeEnum
	5,  // 37: im.ServerCmdSt.device:type_name -> im.DeviceTypeEnum
	5,  // 38: im.LoginMsgSt.device:type_name -> im.DeviceTypeEnum
	2,  // 39: im.GroupChangeMsgSt.groupMsgType:type_name -> im.GroupMsgTypeEnum
	32, // 40: im.GroupChangeMsgSt.groupAddMem:type_name -> im.GroupAddMemSt
	33, // 41: im.GroupChangeMsgSt.groupDelMem:type_name -> im.GroupDelMemSt
	34, // 42: im.GroupChangeMsgSt.groupMemQuit:type_name -> im.GroupMemQuitSt
	35, // 43: im.GroupChangeMsgSt.groupDisMiss:type_name -> im.GroupDismissSt
	36, // 44: im.GroupChangeMsgSt.groupChangeOwner:type_name -> im.GroupChangeOwnerSt
	37, // 45: im.GroupChangeMsgSt.groupChangeName:type_name -> im.GroupChangeNameSt
	41, // 46: im.GroupChangeMsgSt.groupChangeDes:type_name -> im.GroupChangeDesSt
	43, // 47: im.GroupChangeMsgSt.groupChangeMaxUsers:type_name -> im.GroupChangeMaxUsersSt
	42, // 48: im.GroupChangeMsgSt.groupChangeAnnounce:type_name -> im.GroupChangeAnnounceSt
	30, // 49: im.GroupChangeMsgSt.groupDetail:type_name -> im.GroupDetailSt
	31, // 50: im.GroupChangeMsgSt.groupMembers:type_name -> im.GroupMembersSt
	38, // 51: im.GroupChangeMsgSt.groupChangeAvatar:type_name -> im.GroupChangeAvatarSt
	39, // 52: im.GroupChangeMsgSt.groupChangeTop:type_name -> im.GroupChangeTopSt
	40, // 53: im.GroupChangeMsgSt.groupChangeDisturb:type_name -> im.GroupChangeDisturbSt
	1,  // 54: im.ChatMsgSt.contentType:type_name -> im.ContentTypeEnum
	20, // 55: im.ChatMsgSt.imgContent:type_name -> im.ImgContentSt
	21, // 56: im.ChatMsgSt.voiceContent:type_name -> im.VoiceContentSt
	22, // 57: im.ChatMsgSt.videoContent:type_name -> im.VideoContentSt
	24, // 58: im.ChatMsgSt.locationContent:type_name -> im.LocationContentSt
	23, // 59: im.ChatMsgSt.fileContent:type_name -> im.FileContentSt
	25, // 60: im.ChatMsgSt.recallContent:type_name -> im.RecallContentSt
	26, // 61: im.ChatMsgSt.readedAckMsg:type_name -> im.ReadedContentSt
	27, // 62: im.ChatMsgSt.cmdContent:type_name -> im.CmdContentSt
	28, // 63: im.ChatMsgSt.atContent:type_name -> im.AtContentSt
	29, // 64: im.ChatMsgSt.buzContent:type_name -> im.BuzContentSt
	59, // 65: im.ChatMsgSt.redPktMsg:type_name -> im.RedPktMsgst
	60, // 66: im.ChatMsgSt.redPktNoticeMsg:type_name -> im.RedPktNoticeMsgst
	19, // 67: im.ChatMsgSt.txtContentMsg:type_name -> im.TxtContentSt
	5,  // 68: im.MsgSt.device:type_name -> im.DeviceTypeEnum
	0,  // 69: im.MsgSt.msgType:type_name -> im.MsgTypeEnum
	67, // 70: im.MsgSt.loginMsg:type_name -> im.LoginMsgSt
	69, // 71: im.MsgSt.chatMsg:type_name -> im.ChatMsgSt
	68, // 72: im.MsgSt.groupChangeMsg:type_name -> im.GroupChangeMsgSt
	64, // 73: im.MsgSt.clientSleepMsg:type_name -> im.ClientSleepMsgSt
	61, // 74: im.MsgSt.cli2serAckMsg:type_name -> im.Client2ServerAckMsgSt
	63, // 75: im.MsgSt.ser2cliAckMsg:type_name -> im.Server2ClientAckMsgSt
	65, // 76: im.MsgSt.kickoutMsg:type_name -> im.KickoutMsgSt
	66, // 77: im.MsgSt.serverCmdMsg:type_name -> im.ServerCmdSt
	46, // 78: im.MsgSt.confMsg:type_name -> im.ConfMsgSt
	58, // 79: im.MsgSt.callMsg:type_name -> im.CallMsgst
	62, // 80: im.MsgSt.cli2serAckMsgs:type_name -> im.Client2ServerAckMsgSt2
	70, // 81: im.ServerSendMsgs.msgContent:type_name -> im.MsgSt
	0,  // 82: im.ServerSendMsgs.msgType:type_name -> im.MsgTypeEnum
	70, // 83: im.BatchMsgs.msgContent:type_name -> im.MsgSt
	5,  // 84: im.PushParamSt.device:type_name -> im.DeviceTypeEnum
	0,  // 85: im.PushParamSt.msgType:type_name -> im.MsgTypeEnum
	69, // 86: im.PushParamSt.chatMsg:type_name -> im.ChatMsgSt
	65, // 87: im.PushParamSt.kickoutMsg:type_name -> im.KickoutMsgSt
	68, // 88: im.PushParamSt.groupChangeMsg:type_name -> im.GroupChangeMsgSt
	46, // 89: im.PushParamSt.confMsg:type_name -> im.ConfMsgSt
	58, // 90: im.PushParamSt.callMsg:type_name -> im.CallMsgst
	0,  // 91: im.OfflinePushParamSt.msgType:type_name -> im.MsgTypeEnum
	6,  // 92: im.OfflinePushParamSt.phoneType:type_name -> im.PhoneTypeEnum
	69, // 93: im.AppkeyPushSt.chatMsg:type_name -> im.ChatMsgSt
	70, // 94: im.IM.Forward:input_type -> im.MsgSt
	17, // 95: im.IM.Forward:output_type -> im.ForwardResponse
	95, // [95:96] is the sub-list for method output_type
	94, // [94:95] is the sub-list for method input_type
	94, // [94:94] is the sub-list for extension type_name
	94, // [94:94] is the sub-list for extension extendee
	0,  // [0:94] is the sub-list for field type_name
}

func init() { file_im_proto_init() }
func file_im_proto_init() {
	if File_im_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_im_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRedisSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxtContentSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImgContentSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceContentSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoContentSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileContentSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationContentSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecallContentSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadedContentSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdContentSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtContentSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuzContentSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDetailSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMembersSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupAddMemSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDelMemSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemQuitSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDismissSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupChangeOwnerSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupChangeNameSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupChangeAvatarSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupChangeTopSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupChangeDisturbSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupChangeDesSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupChangeAnnounceSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupChangeMaxUsersSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonContentSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfMsgSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallServerSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallCreateSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallJoinSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallDataSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallAnswerSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallRejoinSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cli2SerAckMsgSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ser2CliAckMsgSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallWsMsgst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallMsgst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedPktMsgst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedPktNoticeMsgst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client2ServerAckMsgSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client2ServerAckMsgSt2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server2ClientAckMsgSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSleepMsgSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickoutMsgSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerCmdSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginMsgSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupChangeMsgSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMsgSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerSendMsgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchMsgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushParamSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflinePushParamSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppkeyPushSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_im_proto_rawDesc,
			NumEnums:      17,
			NumMessages:   59,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_im_proto_goTypes,
		DependencyIndexes: file_im_proto_depIdxs,
		EnumInfos:         file_im_proto_enumTypes,
		MessageInfos:      file_im_proto_msgTypes,
	}.Build()
	File_im_proto = out.File
	file_im_proto_rawDesc = nil
	file_im_proto_goTypes = nil
	file_im_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IMClient is the client API for IM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IMClient interface {
	//用于多millipede之间通过grpc转发消息。
	Forward(ctx context.Context, in *MsgSt, opts ...grpc.CallOption) (*ForwardResponse, error)
}

type iMClient struct {
	cc grpc.ClientConnInterface
}

func NewIMClient(cc grpc.ClientConnInterface) IMClient {
	return &iMClient{cc}
}

func (c *iMClient) Forward(ctx context.Context, in *MsgSt, opts ...grpc.CallOption) (*ForwardResponse, error) {
	out := new(ForwardResponse)
	err := c.cc.Invoke(ctx, "/im.IM/Forward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IMServer is the server API for IM service.
type IMServer interface {
	//用于多millipede之间通过grpc转发消息。
	Forward(context.Context, *MsgSt) (*ForwardResponse, error)
}

// UnimplementedIMServer can be embedded to have forward compatible implementations.
type UnimplementedIMServer struct {
}

func (*UnimplementedIMServer) Forward(context.Context, *MsgSt) (*ForwardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Forward not implemented")
}

func RegisterIMServer(s *grpc.Server, srv IMServer) {
	s.RegisterService(&_IM_serviceDesc, srv)
}

func _IM_Forward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMServer).Forward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.IM/Forward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMServer).Forward(ctx, req.(*MsgSt))
	}
	return interceptor(ctx, in, info, handler)
}

var _IM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "im.IM",
	HandlerType: (*IMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Forward",
			Handler:    _IM_Forward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "im.proto",
}
